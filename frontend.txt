FILE: eslint.config.js
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

FILE: index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Campus Printing Platform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

FILE: package.json
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.6.3",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

FILE: postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

FILE: tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        // Theme colors
        'theme-bg': 'var(--theme-bg)',
        'theme-surface': 'var(--theme-surface)',
        'theme-card': 'var(--theme-card)',
        'theme-border': 'var(--theme-border)',
        'theme-text': 'var(--theme-text)',
        'theme-text-secondary': 'var(--theme-text-secondary)',
        'theme-text-muted': 'var(--theme-text-muted)',
        
        // Glassmorphic colors
        'glass-bg': 'var(--glass-bg)',
        'glass-border': 'var(--glass-border)',
        'glass-hover': 'var(--glass-hover)',
        
        // Brand colors
        'campus-green': '#34A853',
        'campus-green-hover': '#2E7D32',
        'campus-green-light': 'rgba(52, 168, 83, 0.1)',
        
        // Status colors
        'success': '#10B981',
        'warning': '#F59E0B',
        'danger': '#EF4444',
        'info': '#3B82F6',
        
        // Light theme specific
        'light-bg': '#F7F8FA',
        'light-surface': '#FFFFFF',
        'light-card': '#FFFFFF',
        'light-border': '#E5E7EB',
        'light-text': '#2D3436',
        'light-text-secondary': '#6B7280',
        'light-text-muted': '#9CA3AF',
        
        // Dark theme specific
        'dark-bg': '#0a0a0a',
        'dark-surface': '#1a1a1a',
        'dark-card': '#2a2a2a',
        'dark-border': '#3a3a3a',
        'dark-text': '#ffffff',
        'dark-text-secondary': '#a0a0a0',
        'dark-text-muted': '#666666',
      },
      fontFamily: {
        sans: ['system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Arial', 'sans-serif'],
      },
      fontSize: {
        'body': '16px',
        'h1': '32px',
        'h2': '28px',
        'h3': '24px',
        'h4': '20px',
      },
      lineHeight: {
        'body': '1.5',
        'heading': '1.3',
      },
      spacing: {
        '2': '8px',
        '4': '16px',
        '6': '24px',
        '8': '32px',
        '12': '48px',
        '16': '64px',
        '20': '80px',
      },
      borderRadius: {
        'glass': '16px',
        'component': '12px',
      },
      backdropBlur: {
        'glass': '20px',
      },
      boxShadow: {
        'glass': '0 8px 32px 0 rgba(31, 38, 135, 0.37)',
        'glass-hover': '0 8px 32px 0 rgba(31, 38, 135, 0.5)',
        'glow': '0 0 20px rgba(52, 168, 83, 0.3)',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'glow': 'glow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        glow: {
          '0%': { boxShadow: '0 0 20px rgba(52, 168, 83, 0.3)' },
          '100%': { boxShadow: '0 0 30px rgba(52, 168, 83, 0.6)' },
        },
      },
    },
  },
  plugins: [],
};
FILE: tsconfig.app.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

FILE: tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

FILE: tsconfig.node.json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

FILE: vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});

FILE: src/App.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ThemeProvider } from './context/ThemeContext';
import { ToastProvider } from './context/ToastContext';
import { Header } from './components/layout/Header';
import { ProtectedRoute } from './components/layout/ProtectedRoute';
import { PublicRoute } from './components/layout/PublicRoute';
import { HomePage } from './pages/HomePage';
import { LoginPage } from './pages/LoginPage';
import { SignupPage } from './pages/SignupPage';
import { DashboardPage } from './pages/DashboardPage';
import { PrintersPage } from './pages/PrintersPage';
import { OrdersPage } from './pages/OrdersPage';
import { DeliveryPage } from './pages/DeliveryPage';
import { AdminPage } from './pages/AdminPage';
import { ComingSoonPage } from './pages/ComingSoonPage';
import { PrinterRegisterPage } from './pages/PrinterRegisterPage';

function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <ToastProvider>
          <Router>
            <div className="min-h-screen bg-theme-bg transition-colors duration-300">
              <Header />
              <Routes>
                <Route path="/" element={<HomePage />} />
                <Route
                  path="/login"
                  element={
                    <PublicRoute>
                      <LoginPage />
                    </PublicRoute>
                  }
                />
                <Route
                  path="/signup"
                  element={
                    <PublicRoute>
                      <SignupPage />
                    </PublicRoute>
                  }
                />
                <Route
                  path="/dashboard"
                  element={
                    <ProtectedRoute>
                      <DashboardPage />
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="/printers"
                  element={
                    <ProtectedRoute>
                      <PrintersPage />
                    </ProtectedRoute>
                  }
                />
                <Route
  path="/orders"
  element={
    <ProtectedRoute>
      <OrdersPage />
    </ProtectedRoute>
  }
/>

                {/* Add Printer registration page */}
                <Route
                  path="/printers/add"
                  element={
                    <ProtectedRoute>
                      <PrinterRegisterPage />
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="/delivery"
                  element={
                    <ProtectedRoute>
                      <DeliveryPage />
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="/admin"
                  element={
                    <ProtectedRoute requiredRole="admin">
                      <AdminPage />
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="/coming-soon"
                  element={
                    <ProtectedRoute>
                      <ComingSoonPage />
                    </ProtectedRoute>
                  }
                />
              </Routes>
            </div>
          </Router>
        </ToastProvider>
      </AuthProvider>
    </ThemeProvider>
  );
}

export default App;
FILE: src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Light theme variables */
  --theme-bg: #F7F8FA;
  --theme-surface: #FFFFFF;
  --theme-card: #FFFFFF;
  --theme-border: #E5E7EB;
  --theme-text: #2D3436;
  --theme-text-secondary: #6B7280;
  --theme-text-muted: #9CA3AF;
  --glass-bg: rgba(255, 255, 255, 0.65);
  --glass-border: rgba(0, 0, 0, 0.1);
  --glass-hover: rgba(255, 255, 255, 0.68);
}

.dark {
  /* Dark theme variables */
  --theme-bg: #0a0a0a;
  --theme-surface: #1a1a1a;
  --theme-card: #2a2a2a;
  --theme-border: #3a3a3a;
  --theme-text: #ffffff;
  --theme-text-secondary: #a0a0a0;
  --theme-text-muted: #666666;
  --glass-bg: rgba(26, 26, 26, 0.95);
  --glass-border: rgba(255, 255, 255, 0.1);
  --glass-hover: rgba(38, 38, 38, 0.98);
}

@layer base {
  * {
    box-sizing: border-box;
  }
  
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    padding: 0;
    background: var(--theme-bg);
    color: var(--theme-text);
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
    min-height: 100vh;
    overflow-x: hidden;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  .light body {
    background: linear-gradient(135deg, #F7F8FA 0%, #E5E7EB 100%);
  }
  
  .dark body {
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
  }
  
  /* Glassmorphic scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: var(--glass-bg);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: var(--glass-border);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: var(--glass-hover);
  }
}

@layer components {
  .glass-card {
    @apply bg-glass-bg backdrop-blur-glass border border-glass-border rounded-glass shadow-glass;
  }
  
  .glass-button {
    @apply bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component px-6 py-3 text-dark-text font-medium transition-all duration-300 hover:bg-glass-hover hover:shadow-glass-hover;
  }
  
  .glass-input {
    @apply bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component px-4 py-3 text-dark-text placeholder-dark-text-muted focus:outline-none focus:border-campus-green focus:shadow-glow transition-all duration-300;
  }
  
  .gradient-text {
    @apply bg-gradient-to-r from-campus-green to-info bg-clip-text text-transparent;
  }
  
  .floating-element {
    @apply animate-bounce;
    animation-duration: 3s;
  }
}
FILE: src/main.tsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';


createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

FILE: src/vite-env.d.ts
/// <reference types="vite/client" />

FILE: src/components/RoleGate.tsx
import { ReactNode, useEffect, useState } from 'react';
import { me, Me, Role } from '../lib/auth';

type Props = {
  allow: Role[]; // roles allowed to view
  children: ReactNode;
  fallback?: ReactNode;
};

export default function RoleGate({ allow, children, fallback }: Props) {
  const [user, setUser] = useState<Me | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    me().then(setUser).finally(() => setLoading(false));
  }, []);

  if (loading) return <div>Loading…</div>;
  if (!user) return fallback ?? <div>Unauthorized</div>;
  if (!allow.includes(user.role)) return <div>Forbidden</div>;
  return <>{children}</>;
}

FILE: src/components/icons/Taka.tsx
import React from 'react';

type TakaProps = {
  size?: number;        // px size, defaults to 20
  className?: string;   // extra utility classes
  title?: string;       // accessibility label
};

const Taka: React.FC<TakaProps> = ({ size = 20, className = '', title = 'Bangladeshi Taka' }) => {
  return (
    <span
      role="img"
      aria-label={title}
      className={`inline-block align-middle font-semibold ${className}`}
      style={{ fontSize: size, lineHeight: 1 }}
    >
      ৳
    </span>
  );
};

export default Taka;

FILE: src/components/layout/Header.tsx
import React, { useState } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import {
  Menu,
  X,
  User,
  CreditCard,
  LogOut,
  Settings,
  UserPlus,
  Edit,
} from "lucide-react";
import { useAuth } from "../../context/AuthContext";
import { ThemeToggle } from "../ui/ThemeToggle";
import { ProfileEditor } from "../ui/ProfileEditor";
import { GlassButton } from "../ui/GlassButton";
import { BackButton } from "../ui/BackButton";
import { cn } from "../../utils/cn";

export const Header: React.FC = () => {
  const { user, isAuthenticated, logout, currentRole, switchRole } = useAuth();
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showProfileEditor, setShowProfileEditor] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  const handleRoleSwitch = (role: any) => {
    switchRole(role);
    setIsProfileMenuOpen(false);

    // Navigate to appropriate dashboard
    switch (role) {
      case "admin":
        navigate("/admin");
        break;
      case "printer-owner":
        navigate("/dashboard");
        break;
      default:
        navigate("/dashboard");
    }
  };

  const handleLogout = () => {
    logout();
    setIsProfileMenuOpen(false);
    navigate("/");
  };

  return (
    <header className="fixed top-0 left-0 right-0 z-40 bg-glass-bg backdrop-blur-glass border-b border-glass-border">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Back + Logo */}
          <div className="flex items-center space-x-12">
            {location.pathname !== "/" && (
              <BackButton className="hidden md:inline-flex" />
            )}
            <Link to="/" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-campus-green to-info rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-lg">CP</span>
              </div>
              <span className="text-xl font-bold gradient-text">
                CampusPrint
              </span>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-4">
            <ThemeToggle />

            {isAuthenticated ? (
              <>
                {/* Credit Balance */}
                <div className="flex items-center space-x-2 px-3 py-1 bg-glass-bg rounded-component border border-glass-border">
                  <CreditCard size={16} className="text-campus-green" />
                  <span className="text-sm font-medium">
                    ৳{user?.credits.toFixed(2)}
                  </span>
                </div>

                {/* Profile Menu */}
                <div className="relative">
                  <button
                    onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
                    className="flex items-center space-x-2 p-2 rounded-component hover:bg-glass-hover transition-colors"
                  >
                    {user?.profilePicture ? (
                      <img
                        src={
                          /^https?:\/\//i.test(user.profilePicture)
                            ? user.profilePicture
                            : `${
                                import.meta.env.VITE_API_URL?.replace(
                                  /\/+$/,
                                  ""
                                ) || "http://localhost:8080"
                              }${
                                user.profilePicture.startsWith("/") ? "" : "/"
                              }${user.profilePicture}`
                        }
                        alt={user?.username || "profile"}
                        className="w-8 h-8 rounded-full object-cover"
                      />
                    ) : (
                      <div className="w-8 h-8 bg-campus-green rounded-full flex items-center justify-center">
                        <User size={16} className="text-white" />
                      </div>
                    )}
                    <span className="text-sm font-medium">
                      {user?.username}
                    </span>
                  </button>

                  {isProfileMenuOpen && (
                    <div className="absolute right-0 mt-2 w-64 py-2 z-50 bg-glass-bg backdrop-blur-xl border border-glass-border rounded-glass shadow-glass-hover">
                      <div className="px-4 py-3 border-b border-glass-border">
                        <p className="text-sm font-medium">
                          {user?.firstName} {user?.lastName}
                        </p>
                        <p className="text-xs text-theme-text-secondary">
                          {user?.email}
                        </p>
                        <p className="text-xs text-campus-green mt-1">
                          Current: {currentRole}
                        </p>
                      </div>

                      {user?.roles && user.roles.length > 1 && (
                        <div className="px-4 py-2 border-b border-glass-border">
                          <p className="text-xs text-theme-text-secondary mb-2">
                            Switch Role:
                          </p>
                          {user.roles.map((role) => (
                            <button
                              key={role}
                              onClick={() => handleRoleSwitch(role)}
                              className={cn(
                                "block w-full text-left px-2 py-1 text-sm rounded hover:bg-glass-hover transition-colors",
                                currentRole === role && "text-campus-green"
                              )}
                            >
                              {role.charAt(0).toUpperCase() +
                                role.slice(1).replace("-", " ")}
                            </button>
                          ))}
                        </div>
                      )}

                      <div className="py-1">
                        <button
                          onClick={() => {
                            setShowProfileEditor(true);
                            setIsProfileMenuOpen(false);
                          }}
                          className="flex items-center w-full px-4 py-2 text-sm hover:bg-glass-hover transition-colors"
                        >
                          <Edit size={16} className="mr-2" />
                          Edit Profile
                        </button>
                        <Link
                          to="/dashboard"
                          className="flex items-center px-4 py-2 text-sm hover:bg-glass-hover transition-colors"
                          onClick={() => setIsProfileMenuOpen(false)}
                        >
                          <Settings size={16} className="mr-2" />
                          Dashboard
                        </Link>
                        <button
                          onClick={handleLogout}
                          className="flex items-center w-full px-4 py-2 text-sm hover:bg-glass-hover transition-colors text-danger"
                        >
                          <LogOut size={16} className="mr-2" />
                          Sign Out
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            ) : (
              <div className="flex items-center space-x-3">
                <GlassButton variant="ghost" onClick={() => navigate("/login")}>
                  Login
                </GlassButton>
                <GlassButton
                  variant="primary"
                  onClick={() => navigate("/signup")}
                >
                  <UserPlus size={16} className="mr-2" />
                  Sign Up
                </GlassButton>
              </div>
            )}
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="md:hidden p-2 rounded-component hover:bg-glass-hover transition-colors"
          >
            {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMobileMenuOpen && (
          <div className="md:hidden py-4 border-t border-glass-border">
            <div className="flex justify-between items-center px-2 py-2 mb-3">
              <span className="text-sm font-medium text-theme-text">Theme</span>
              <ThemeToggle />
            </div>

            {isAuthenticated ? (
              <div className="space-y-3">
                <div className="flex items-center space-x-3 px-2 py-2">
                  {user?.profilePicture ? (
                    <img
                      src={
                        /^https?:\/\//i.test(user.profilePicture)
                          ? user.profilePicture
                          : `${
                              import.meta.env.VITE_API_URL?.replace(
                                /\/+$/,
                                ""
                              ) || "http://localhost:8080"
                            }${user.profilePicture.startsWith("/") ? "" : "/"}${
                              user.profilePicture
                            }`
                      }
                      alt={user?.username || "profile"}
                      className="w-10 h-10 rounded-full object-cover"
                    />
                  ) : (
                    <div className="w-10 h-10 bg-campus-green rounded-full flex items-center justify-center">
                      <User size={20} className="text-white" />
                    </div>
                  )}
                  <div>
                    <p className="font-medium">{user?.username}</p>
                    <p className="text-sm text-theme-text-secondary">
                      ৳{user?.credits.toFixed(2)}
                    </p>
                  </div>
                </div>
                <Link
                  to="/dashboard"
                  className="block px-2 py-2 text-sm hover:bg-glass-hover rounded-component transition-colors"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  Dashboard
                </Link>
                <button
                  onClick={handleLogout}
                  className="block w-full text-left px-2 py-2 text-sm hover:bg-glass-hover rounded-component transition-colors text-danger"
                >
                  Sign Out
                </button>
                <button
                  onClick={() => {
                    setShowProfileEditor(true);
                    setIsMobileMenuOpen(false);
                  }}
                  className="block w-full text-left px-2 py-2 text-sm hover:bg-glass-hover rounded-component transition-colors"
                >
                  Edit Profile
                </button>
              </div>
            ) : (
              <div className="space-y-3">
                <GlassButton
                  variant="ghost"
                  className="w-full justify-center"
                  onClick={() => {
                    navigate("/login");
                    setIsMobileMenuOpen(false);
                  }}
                >
                  Login
                </GlassButton>
                <GlassButton
                  variant="primary"
                  className="w-full justify-center"
                  onClick={() => {
                    navigate("/signup");
                    setIsMobileMenuOpen(false);
                  }}
                >
                  <UserPlus size={16} className="mr-2" />
                  Sign Up
                </GlassButton>
              </div>
            )}
          </div>
        )}
      </div>

      <ProfileEditor
        isOpen={showProfileEditor}
        onClose={() => setShowProfileEditor(false)}
      />
    </header>
  );
};

FILE: src/components/layout/MobileNavigation.tsx
import React from 'react';
import { Home, Printer, Truck, User } from 'lucide-react';
import { useUser } from '../../context/UserContext';
import { cn } from '../../utils/cn';

interface MobileNavigationProps {
  currentPage: string;
  onPageChange: (page: string) => void;
}

export const MobileNavigation: React.FC<MobileNavigationProps> = ({
  currentPage,
  onPageChange,
}) => {
  const { user } = useUser();

  const getNavigationItems = () => {
    const common = [
      { id: 'dashboard', label: 'Home', icon: Home },
      { id: 'printers', label: 'Printers', icon: Printer },
    ];

    switch (user?.role) {
      case 'student':
        return [
          ...common,
          { id: 'deliveries', label: 'Deliveries', icon: Truck },
          { id: 'profile', label: 'Profile', icon: User },
        ];
      case 'printer-owner':
        return [
          ...common,
          { id: 'my-printers', label: 'My Printers', icon: Printer },
          { id: 'job-queue', label: 'Jobs', icon: Truck },
        ];
      case 'admin':
        return [
          ...common,
          { id: 'users', label: 'Users', icon: User },
          { id: 'analytics', label: 'Analytics', icon: Home },
        ];
      default:
        return common;
    }
  };

  const navigationItems = getNavigationItems();

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 lg:hidden">
      <div className="flex">
        {navigationItems.map((item) => {
          const Icon = item.icon;
          return (
            <button
              key={item.id}
              onClick={() => onPageChange(item.id)}
              className={cn(
                'flex-1 flex flex-col items-center justify-center py-2 text-xs font-medium transition-colors min-h-[60px]',
                currentPage === item.id
                  ? 'text-campus-green bg-campus-green-light'
                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
              )}
            >
              <Icon size={20} className="mb-1" />
              {item.label}
            </button>
          );
        })}
      </div>
    </div>
  );
};
FILE: src/components/layout/Navbar.tsx
import React, { useState } from 'react';
import { Menu, X, User, CreditCard, Bell } from 'lucide-react';
import { useUser } from '../../context/UserContext';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';

interface NavbarProps {
  onMenuToggle?: () => void;
}

export const Navbar: React.FC<NavbarProps> = ({ onMenuToggle }) => {
  const { user, logout } = useUser();
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);

  const handleRoleChange = (role: 'student' | 'printer-owner' | 'admin') => {
    // In demo mode, allow role switching
    if (user) {
      user.role = role;
      setIsProfileMenuOpen(false);
      window.location.reload(); // Simple way to refresh the UI
    }
  };

  return (
    <nav className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center">
            {onMenuToggle && (
              <button
                onClick={onMenuToggle}
                className="mr-3 p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 lg:hidden"
              >
                <Menu size={20} />
              </button>
            )}
            <h1 className="text-xl font-bold text-charcoal">CampusPrint</h1>
          </div>

          <div className="flex items-center space-x-4">
            {user && (
              <>
                <div className="flex items-center space-x-2 text-sm">
                  <CreditCard size={16} className="text-gray-600" />
                  <span className="font-medium">৳{user.credits.toFixed(2)}</span>
                </div>
                
                <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full">
                  <Bell size={20} />
                  <Badge variant="danger" size="sm" className="absolute -top-1 -right-1 min-w-0 px-1">
                    3
                  </Badge>
                </button>

                <div className="relative">
                  <button
                    onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
                    className="flex items-center space-x-2 p-2 rounded-md hover:bg-gray-100"
                  >
                    <div className="w-8 h-8 bg-campus-green rounded-full flex items-center justify-center">
                      <User size={16} className="text-white" />
                    </div>
                    <span className="text-sm font-medium text-gray-700">{user.name}</span>
                  </button>

                  {isProfileMenuOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-component shadow-lg border border-gray-200 py-1">
                      <div className="px-3 py-2 text-sm text-gray-500 border-b border-gray-200">
                        Current Role: <span className="font-medium text-gray-900">{user.role}</span>
                      </div>
                      <div className="px-3 py-2 text-xs text-gray-500 border-b border-gray-200">
                        Demo Mode - Switch Roles:
                      </div>
                      <button
                        onClick={() => handleRoleChange('student')}
                        className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        Student
                      </button>
                      <button
                        onClick={() => handleRoleChange('printer-owner')}
                        className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        Printer Owner
                      </button>
                      <button
                        onClick={() => handleRoleChange('admin')}
                        className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      >
                        Admin
                      </button>
                      <div className="border-t border-gray-200">
                        <button
                          onClick={logout}
                          className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                        >
                          Sign Out
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};
FILE: src/components/layout/ProtectedRoute.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { UserRole } from '../../types';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: UserRole;
  requireAuth?: boolean;
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredRole,
  requireAuth = true,
}) => {
  const { isAuthenticated, user, currentRole, isLoading } = useAuth();
  const location = useLocation();

if (isLoading) {
  return (
    <div className="min-h-[40vh] flex items-center justify-center text-theme-text-secondary">
      Loading…
    </div>
  );
}


  if (requireAuth && !isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  if (requiredRole && (!user?.roles.includes(requiredRole) || currentRole !== requiredRole)) {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
};
FILE: src/components/layout/PublicRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

interface PublicRouteProps {
  children: React.ReactNode;
}

/**
 * PublicRoute blocks authenticated users from accessing routes like /login or /signup.
 * If auth is still loading, we wait to avoid flicker.
 */
export const PublicRoute: React.FC<PublicRouteProps> = ({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return null;
  }

  if (isAuthenticated) {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
};

FILE: src/components/layout/Sidebar.tsx
import React from 'react';
import { 
  Home, 
  Printer, 
  Truck, 
  Settings, 
  Users, 
  BarChart3, 
  CheckSquare,
  User,
  X
} from 'lucide-react';
import { useUser } from '../../context/UserContext';
import { cn } from '../../utils/cn';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
  currentPage: string;
  onPageChange: (page: string) => void;
}

export const Sidebar: React.FC<SidebarProps> = ({
  isOpen,
  onClose,
  currentPage,
  onPageChange,
}) => {
  const { user } = useUser();

  const getNavigationItems = () => {
    const common = [
      { id: 'dashboard', label: 'Dashboard', icon: Home },
      { id: 'printers', label: 'Printers', icon: Printer },
    ];

    switch (user?.role) {
      case 'student':
        return [
          ...common,
          { id: 'deliveries', label: 'Deliveries', icon: Truck },
          { id: 'profile', label: 'Profile', icon: User },
        ];
      case 'printer-owner':
        return [
          ...common,
          { id: 'my-printers', label: 'My Printers', icon: Settings },
          { id: 'job-queue', label: 'Job Queue', icon: CheckSquare },
          { id: 'deliveries', label: 'Deliveries', icon: Truck },
        ];
      case 'admin':
        return [
          ...common,
          { id: 'users', label: 'User Management', icon: Users },
          { id: 'analytics', label: 'Analytics', icon: BarChart3 },
          { id: 'printer-verification', label: 'Printer Verification', icon: CheckSquare },
          { id: 'transactions', label: 'Transactions', icon: BarChart3 },
        ];
      default:
        return common;
    }
  };

  const navigationItems = getNavigationItems();

  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={onClose}
        />
      )}
      
      {/* Sidebar */}
      <div className={cn(
        'fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0',
        isOpen ? 'translate-x-0' : '-translate-x-full'
      )}>
        <div className="flex items-center justify-between p-4 border-b border-gray-200 lg:hidden">
          <h2 className="text-lg font-semibold text-charcoal">Navigation</h2>
          <button
            onClick={onClose}
            className="p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
          >
            <X size={20} />
          </button>
        </div>
        
        <nav className="mt-4">
          <ul className="space-y-1 px-3">
            {navigationItems.map((item) => {
              const Icon = item.icon;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => {
                      onPageChange(item.id);
                      onClose();
                    }}
                    className={cn(
                      'w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors',
                      currentPage === item.id
                        ? 'bg-campus-green-light text-campus-green'
                        : 'text-gray-700 hover:bg-gray-100'
                    )}
                  >
                    <Icon size={20} className="mr-3" />
                    {item.label}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>
      </div>
    </>
  );
};
FILE: src/components/pages/Dashboard.tsx
import React from 'react';
import { BarChart3, FileText, Printer } from 'lucide-react';
import Taka from '../icons/Taka';
import { useUser } from '../../context/UserContext';
import { Card } from '../ui/Card';
import { Badge } from '../ui/Badge';

export const Dashboard: React.FC = () => {
  const { user } = useUser();

  const getDashboardData = () => {
    switch (user?.role) {
      case 'student':
        return {
          title: 'Student Dashboard',
          stats: [
            { label: 'Print Credits', value: `৳${user.credits.toFixed(2)}`, icon: () => <Taka size={20} />, color: 'text-green-600' },
            { label: 'Documents Printed', value: '24', icon: FileText, color: 'text-blue-600' },
            { label: 'Active Orders', value: '2', icon: Printer, color: 'text-orange-600' },
          ],
          recentActivity: [
            { id: 1, action: 'Printed lecture notes', time: '2 hours ago', status: 'completed' },
            { id: 2, action: 'Uploaded research paper', time: '1 day ago', status: 'pending' },
            { id: 3, action: 'Added ৳20 credits', time: '3 days ago', status: 'completed' },
          ],
        };
      case 'printer-owner':
        return {
          title: 'Printer Owner Dashboard',
          stats: [
            { label: 'Monthly Revenue', value: '৳342.50', icon: () => <Taka size={20} />, color: 'text-green-600' },
            { label: 'Print Jobs', value: '89', icon: FileText, color: 'text-blue-600' },
            { label: 'Active Printers', value: '3', icon: Printer, color: 'text-orange-600' },
          ],
          recentActivity: [
            { id: 1, action: 'Job completed - Biology notes', time: '30 minutes ago', status: 'completed' },
            { id: 2, action: 'New print request', time: '1 hour ago', status: 'pending' },
            { id: 3, action: 'Printer maintenance completed', time: '2 hours ago', status: 'completed' },
          ],
        };
      case 'admin':
        return {
          title: 'Admin Dashboard',
          stats: [
            { label: 'Total Users', value: '1,234', icon: BarChart3, color: 'text-blue-600' },
            { label: 'Active Printers', value: '45', icon: Printer, color: 'text-green-600' },
            { label: 'Monthly Revenue', value: '৳12,450', icon: () => <Taka size={20} />, color: 'text-green-600' },
          ],
          recentActivity: [
            { id: 1, action: 'New printer registered', time: '1 hour ago', status: 'pending' },
            { id: 2, action: 'User report resolved', time: '2 hours ago', status: 'completed' },
            { id: 3, action: 'System maintenance completed', time: '1 day ago', status: 'completed' },
          ],
        };
      default:
        return {
          title: 'Dashboard',
          stats: [],
          recentActivity: [],
        };
    }
  };

  const dashboardData = getDashboardData();

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-charcoal mb-2">{dashboardData.title}</h1>
        <p className="text-gray-600">Welcome back, {user?.name}!</p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {dashboardData.stats.map((stat, index) => {
          const Icon = stat.icon;
          return (
            <Card key={index} className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">{stat.label}</p>
                  <p className="text-2xl font-bold text-charcoal">{stat.value}</p>
                </div>
                <Icon size={24} className={stat.color} />
              </div>
            </Card>
          );
        })}
      </div>

      {/* Recent Activity */}
      <Card>
        <div className="p-6">
          <h2 className="text-lg font-semibold text-charcoal mb-4">Recent Activity</h2>
          <div className="space-y-3">
            {dashboardData.recentActivity.map((activity) => (
              <div key={activity.id} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                <div>
                  <p className="text-sm font-medium text-gray-900">{activity.action}</p>
                  <p className="text-xs text-gray-500">{activity.time}</p>
                </div>
                <Badge variant={activity.status === 'completed' ? 'success' : 'warning'}>
                  {activity.status}
                </Badge>
              </div>
            ))}
          </div>
        </div>
      </Card>

      {/* Quick Actions */}
      <Card>
        <div className="p-6">
          <h2 className="text-lg font-semibold text-charcoal mb-4">Quick Actions</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {user?.role === 'student' && (
              <>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">Upload Document</h3>
                  <p className="text-sm text-gray-600">Upload files to print</p>
                </button>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">Add Credits</h3>
                  <p className="text-sm text-gray-600">Top up your account</p>
                </button>
              </>
            )}
            {user?.role === 'printer-owner' && (
              <>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">Add Printer</h3>
                  <p className="text-sm text-gray-600">Register new printer</p>
                </button>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">View Queue</h3>
                  <p className="text-sm text-gray-600">Check pending jobs</p>
                </button>
              </>
            )}
            {user?.role === 'admin' && (
              <>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">User Management</h3>
                  <p className="text-sm text-gray-600">Manage users</p>
                </button>
                <button className="p-4 text-left border border-gray-200 rounded-component hover:bg-gray-50 transition-colors">
                  <h3 className="font-medium text-gray-900">System Settings</h3>
                  <p className="text-sm text-gray-600">Configure platform</p>
                </button>
              </>
            )}
          </div>
        </div>
      </Card>
    </div>
  );
};
FILE: src/components/pages/Deliveries.tsx
import React, { useState } from 'react';
import { MapPin, Clock, Package, CheckCircle, XCircle } from 'lucide-react';
import Taka from '../icons/Taka';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { useToast } from '../../context/ToastContext';
import { useUser } from '../../context/UserContext';

interface DeliveryRequest {
  id: string;
  studentName: string;
  location: string;
  distance: string;
  payment: number;
  items: string[];
  timeRequested: string;
  status: 'pending' | 'accepted' | 'in-progress' | 'completed';
  urgency: 'low' | 'medium' | 'high';
}

export const Deliveries: React.FC = () => {
  const { user } = useUser();
  const { addToast } = useToast();
  const [filter, setFilter] = useState<'all' | 'pending' | 'accepted' | 'completed'>('all');

  const deliveryRequests: DeliveryRequest[] = [
    {
      id: '1',
      studentName: 'Sarah Johnson',
      location: 'Residence Hall B, Room 204',
      distance: '0.3 miles',
      payment: 8.50,
      items: ['Lecture Notes (15 pages)', 'Assignment Sheet (2 pages)'],
      timeRequested: '2 hours ago',
      status: 'pending',
      urgency: 'medium',
    },
    {
      id: '2',
      studentName: 'Mike Chen',
      location: 'Library Study Room 12',
      distance: '0.1 miles',
      payment: 12.00,
      items: ['Research Paper (25 pages)', 'Bibliography (5 pages)'],
      timeRequested: '1 hour ago',
      status: 'pending',
      urgency: 'high',
    },
    {
      id: '3',
      studentName: 'Emma Davis',
      location: 'Student Union Café',
      distance: '0.2 miles',
      payment: 6.75,
      items: ['Class Handouts (8 pages)'],
      timeRequested: '30 minutes ago',
      status: 'accepted',
      urgency: 'low',
    },
    {
      id: '4',
      studentName: 'James Wilson',
      location: 'Engineering Building',
      distance: '0.5 miles',
      payment: 15.25,
      items: ['Lab Report (12 pages)', 'Diagrams (6 pages)'],
      timeRequested: '4 hours ago',
      status: 'completed',
      urgency: 'medium',
    },
  ];

  const filteredDeliveries = deliveryRequests.filter(delivery => {
    if (filter === 'all') return true;
    return delivery.status === filter;
  });

  const handleAcceptDelivery = (deliveryId: string) => {
    addToast({
      type: 'success',
      title: 'Delivery Accepted',
      message: 'You have accepted this delivery request',
    });
  };

  const handleRejectDelivery = (deliveryId: string) => {
    addToast({
      type: 'info',
      title: 'Delivery Rejected',
      message: 'You have rejected this delivery request',
    });
  };

  const handleCompleteDelivery = (deliveryId: string) => {
    addToast({
      type: 'success',
      title: 'Delivery Completed',
      message: 'Delivery has been marked as completed',
    });
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-charcoal mb-2">
          {user?.role === 'student' ? 'My Delivery Requests' : 'Available Deliveries'}
        </h1>
        <p className="text-gray-600">
          {user?.role === 'student' 
            ? 'Track your delivery requests and their status'
            : 'Accept delivery requests and earn money'
          }
        </p>
      </div>

      {/* Filter Tabs */}
      <div className="flex space-x-1 bg-gray-100 p-1 rounded-component">
        {['all', 'pending', 'accepted', 'completed'].map((status) => (
          <button
            key={status}
            onClick={() => setFilter(status as any)}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              filter === status
                ? 'bg-white text-campus-green shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </button>
        ))}
      </div>

      {/* Delivery Requests */}
      <div className="space-y-4">
        {filteredDeliveries.map((delivery) => (
          <Card key={delivery.id} className="p-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-3">
                  <h3 className="font-semibold text-charcoal">{delivery.studentName}</h3>
                  <Badge
                    variant={
                      delivery.status === 'completed' ? 'success' :
                      delivery.status === 'accepted' ? 'info' :
                      delivery.status === 'pending' ? 'warning' : 'default'
                    }
                  >
                    {delivery.status}
                  </Badge>
                  <Badge
                    variant={
                      delivery.urgency === 'high' ? 'danger' :
                      delivery.urgency === 'medium' ? 'warning' : 'default'
                    }
                    size="sm"
                  >
                    {delivery.urgency} priority
                  </Badge>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div className="flex items-center text-sm text-gray-600">
                    <MapPin size={16} className="mr-2" />
                    <span>{delivery.location}</span>
                    <span className="mx-2">•</span>
                    <span>{delivery.distance}</span>
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <Clock size={16} className="mr-2" />
                    <span>{delivery.timeRequested}</span>
                  </div>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm font-medium text-gray-900 mb-2">Items to deliver:</p>
                  <ul className="text-sm text-gray-600 space-y-1">
                    {delivery.items.map((item, index) => (
                      <li key={index} className="flex items-center">
                        <Package size={14} className="mr-2" />
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              
              <div className="flex flex-col items-end gap-3">
                <div className="flex items-center text-lg font-bold text-campus-green">
                  <Taka size={20} />
                  <span>{delivery.payment.toFixed(2)}</span>
                </div>
                
                <div className="flex gap-2">
                  {delivery.status === 'pending' && user?.role !== 'student' && (
                    <>
                      <Button
                        variant="secondary"
                        size="sm"
                        onClick={() => handleRejectDelivery(delivery.id)}
                      >
                        <XCircle size={16} className="mr-1" />
                        Reject
                      </Button>
                      <Button
                        size="sm"
                        onClick={() => handleAcceptDelivery(delivery.id)}
                      >
                        <CheckCircle size={16} className="mr-1" />
                        Accept
                      </Button>
                    </>
                  )}
                  {delivery.status === 'accepted' && user?.role !== 'student' && (
                    <Button
                      size="sm"
                      onClick={() => handleCompleteDelivery(delivery.id)}
                    >
                      <CheckCircle size={16} className="mr-1" />
                      Mark Complete
                    </Button>
                  )}
                  {delivery.status === 'completed' && (
                    <Badge variant="success" size="sm">
                      <CheckCircle size={14} className="mr-1" />
                      Completed
                    </Badge>
                  )}
                </div>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {filteredDeliveries.length === 0 && (
        <Card className="p-12 text-center">
          <Package size={48} className="mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No deliveries found</h3>
          <p className="text-gray-600">
            {filter === 'all' 
              ? 'No delivery requests available at the moment'
              : `No ${filter} deliveries found`
            }
          </p>
        </Card>
      )}
    </div>
  );
};
FILE: src/components/pages/Printers.tsx
import React, { useState } from 'react';
import { MapPin, Printer, Upload, Filter, Search } from 'lucide-react';
import Taka from '../icons/Taka';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Input } from '../ui/Input';
import { Modal } from '../ui/Modal';
import { useToast } from '../../context/ToastContext';

interface PrinterData {
  id: string;
  name: string;
  location: string;
  distance: string;
  price: number;
  status: 'online' | 'offline' | 'busy';
  owner: string;
  type: string;
  rating: number;
  image: string;
}

export const Printers: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLocation, setSelectedLocation] = useState('all');
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [selectedPrinter, setSelectedPrinter] = useState<PrinterData | null>(null);
  const { addToast } = useToast();

  const printers: PrinterData[] = [
    {
      id: '1',
      name: 'QuickPrint Pro',
      location: 'Library - 2nd Floor',
      distance: '0.2 miles',
      price: 0.10,
      status: 'online',
      owner: 'Campus Print Services',
      type: 'Color Laser',
      rating: 4.8,
      image: 'https://images.pexels.com/photos/4439901/pexels-photo-4439901.jpeg?auto=compress&cs=tinysrgb&w=400',
    },
    {
      id: '2',
      name: 'Student Center Printer',
      location: 'Student Union Building',
      distance: '0.4 miles',
      price: 0.08,
      status: 'online',
      owner: 'Print Hub LLC',
      type: 'Black & White',
      rating: 4.5,
      image: 'https://images.pexels.com/photos/4439901/pexels-photo-4439901.jpeg?auto=compress&cs=tinysrgb&w=400',
    },
    {
      id: '3',
      name: 'Engineering Lab Printer',
      location: 'Engineering Building',
      distance: '0.6 miles',
      price: 0.12,
      status: 'busy',
      owner: 'TechPrint Solutions',
      type: 'Color Laser',
      rating: 4.9,
      image: 'https://images.pexels.com/photos/4439901/pexels-photo-4439901.jpeg?auto=compress&cs=tinysrgb&w=400',
    },
    {
      id: '4',
      name: 'Dorm Common Room',
      location: 'Residence Hall A',
      distance: '0.1 miles',
      price: 0.09,
      status: 'offline',
      owner: 'Campus Living',
      type: 'All-in-One',
      rating: 4.2,
      image: 'https://images.pexels.com/photos/4439901/pexels-photo-4439901.jpeg?auto=compress&cs=tinysrgb&w=400',
    },
  ];

  const filteredPrinters = printers.filter(printer => {
    const matchesSearch = printer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         printer.location.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLocation = selectedLocation === 'all' || printer.location.includes(selectedLocation);
    return matchesSearch && matchesLocation;
  });

  const handlePrintRequest = (printer: PrinterData) => {
    setSelectedPrinter(printer);
    setIsUploadModalOpen(true);
  };

  const handleUpload = () => {
    addToast({
      type: 'success',
      title: 'Print job submitted!',
      message: `Your document has been sent to ${selectedPrinter?.name}`,
    });
    setIsUploadModalOpen(false);
    setSelectedPrinter(null);
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-charcoal mb-2">Available Printers</h1>
        <p className="text-gray-600">Find and print to printers near you</p>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <Input
            icon={<Search size={20} />}
            placeholder="Search printers or locations..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <select
          value={selectedLocation}
          onChange={(e) => setSelectedLocation(e.target.value)}
          className="px-4 py-2 border border-gray-300 rounded-component bg-white focus:outline-none focus:ring-2 focus:ring-campus-green"
        >
          <option value="all">All Locations</option>
          <option value="Library">Library</option>
          <option value="Student Union">Student Union</option>
          <option value="Engineering">Engineering</option>
          <option value="Residence">Residence Halls</option>
        </select>
      </div>

      {/* Printer Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredPrinters.map((printer) => (
          <Card key={printer.id} hover className="p-0 overflow-hidden">
            <div className="aspect-video bg-gray-100 relative">
              <img
                src={printer.image}
                alt={printer.name}
                className="w-full h-full object-cover"
              />
              <div className="absolute top-3 right-3">
                <Badge
                  variant={
                    printer.status === 'online' ? 'success' :
                    printer.status === 'busy' ? 'warning' : 'danger'
                  }
                >
                  {printer.status}
                </Badge>
              </div>
            </div>
            
            <div className="p-6">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h3 className="font-semibold text-charcoal">{printer.name}</h3>
                  <p className="text-sm text-gray-600">{printer.type}</p>
                </div>
                <div className="text-right">
                  <div className="flex items-center text-sm text-gray-600">
                    <Taka size={14} />
                    <span className="font-medium">{printer.price}/page</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center text-sm text-gray-600 mb-3">
                <MapPin size={16} className="mr-2" />
                <span>{printer.location}</span>
                <span className="mx-2">•</span>
                <span>{printer.distance}</span>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <span className="text-sm text-gray-600">★ {printer.rating}</span>
                </div>
                <Button
                  onClick={() => handlePrintRequest(printer)}
                  disabled={printer.status === 'offline'}
                  size="sm"
                >
                  Print Here
                </Button>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {/* Upload Modal */}
      <Modal
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        title={`Print to ${selectedPrinter?.name}`}
      >
        <div className="space-y-4">
          <div className="p-4 bg-gray-50 rounded-component">
            <h3 className="font-medium text-gray-900 mb-2">Printer Details</h3>
            <div className="space-y-1 text-sm text-gray-600">
              <p><strong>Location:</strong> {selectedPrinter?.location}</p>
              <p><strong>Price:</strong> ৳{selectedPrinter?.price}/page</p>
              <p><strong>Type:</strong> {selectedPrinter?.type}</p>
            </div>
          </div>
          
          <div className="border-2 border-dashed border-gray-300 rounded-component p-8 text-center">
            <Upload size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Upload Document</h3>
            <p className="text-sm text-gray-600 mb-4">
              Drag and drop your files here, or click to browse
            </p>
            <input
              type="file"
              multiple
              accept=".pdf,.doc,.docx,.txt"
              className="hidden"
              id="file-upload"
            />
            <label htmlFor="file-upload">
              <Button variant="secondary">
                <span>Browse Files</span>
              </Button>
            </label>
          </div>
          
          <div className="flex gap-3">
            <Button
              variant="secondary"
              onClick={() => setIsUploadModalOpen(false)}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button onClick={handleUpload} className="flex-1">
              Submit Print Job
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};
FILE: src/components/ui/BackButton.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { GlassButton } from './GlassButton';
import { cn } from '../../utils/cn';

interface BackButtonProps {
  to?: string;
  className?: string;
}

export const BackButton: React.FC<BackButtonProps> = ({ to, className = "" }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    if (to) {
      navigate(to);
    } else {
      navigate(-1);
    }
  };

  return (
    <GlassButton
      variant="secondary"
      size="sm"
      glow
      onClick={handleClick}
      className={cn('flex items-center space-x-2 backdrop-blur-lg bg-white/20 dark:bg-white/10 border border-white/30', className)}
    >
      <ArrowLeft size={16} />
    </GlassButton>
  );
};

FILE: src/components/ui/Badge.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';
  size?: 'sm' | 'md';
}

export const Badge: React.FC<BadgeProps> = ({
  children,
  className,
  variant = 'default',
  size = 'md',
  ...props
}) => {
  const variants = {
    default: 'bg-gray-100 text-gray-800',
    success: 'bg-green-100 text-green-800',
    warning: 'bg-yellow-100 text-yellow-800',
    danger: 'bg-red-100 text-red-800',
    info: 'bg-blue-100 text-blue-800',
  };

  const sizes = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2.5 py-1 text-sm',
  };

  return (
    <span
      className={cn(
        'inline-flex items-center rounded-full font-medium',
        variants[variant],
        sizes[size],
        className
      )}
      {...props}
    >
      {children}
    </span>
  );
};
FILE: src/components/ui/Button.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
}

export const Button: React.FC<ButtonProps> = ({
  children,
  className,
  variant = 'primary',
  size = 'md',
  loading = false,
  disabled,
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-component transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    primary: 'bg-campus-green text-white hover:bg-campus-green-hover focus:ring-campus-green',
    secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-campus-green',
    danger: 'bg-danger text-white hover:bg-danger-hover focus:ring-danger',
    ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-campus-green',
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
  };

  return (
    <button
      className={cn(
        baseClasses,
        variants[variant],
        sizes[size],
        className
      )}
      disabled={disabled || loading}
      {...props}
    >
      {loading && (
        <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {children}
    </button>
  );
};
FILE: src/components/ui/Card.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  hover?: boolean;
  padding?: 'none' | 'sm' | 'md' | 'lg';
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  className, 
  hover = false, 
  padding = 'md',
  ...props 
}) => {
  const paddingClasses = {
    none: '',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8',
  };

  return (
    <div
      className={cn(
        'bg-white rounded-component shadow-card border border-gray-100',
        hover && 'hover:shadow-card-hover transition-shadow duration-200',
        paddingClasses[padding],
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
};
FILE: src/components/ui/ConfirmDialog.tsx
import React from 'react';
import { GlassCard } from './GlassCard';
import { GlassButton } from './GlassButton';

interface ConfirmDialogProps {
  open: boolean;
  title: string;
  message: React.ReactNode;
  confirmLabel?: string;
  cancelLabel?: string;
  confirmVariant?: 'primary' | 'secondary' | 'success' | 'danger' | 'ghost';
  onConfirm: () => void;
  onCancel: () => void;
  loading?: boolean;
}

export const ConfirmDialog: React.FC<ConfirmDialogProps> = ({
  open,
  title,
  message,
  confirmLabel = 'Confirm',
  cancelLabel = 'Cancel',
  confirmVariant = 'danger',
  onConfirm,
  onCancel,
  loading = false,
}) => {
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-md">
      <GlassCard className="w-full max-w-md p-6">
        <div className="space-y-4">
          <div>
            <h3 className="text-xl font-semibold text-theme-text mb-2">{title}</h3>
            <div className="text-theme-text-secondary text-sm leading-relaxed">
              {message}
            </div>
          </div>
          <div className="flex gap-3 pt-2">
            <GlassButton
              variant="secondary"
              className="flex-1"
              onClick={onCancel}
              disabled={loading}
            >
              {cancelLabel}
            </GlassButton>
            <GlassButton
              variant={confirmVariant}
              className="flex-1"
              onClick={onConfirm}
              loading={loading}
            >
              {confirmLabel}
            </GlassButton>
          </div>
        </div>
      </GlassCard>
    </div>
  );
};

export default ConfirmDialog;

FILE: src/components/ui/FileUpload.tsx
import React, { useState, useRef } from 'react';
import { Upload, X, FileText, Image as ImageIcon } from 'lucide-react';
import { GlassButton } from './GlassButton';
import { cn } from '../../utils/cn';

interface FilePreview {
  file: File;
  id: string;
  preview?: string;
}

interface FileUploadProps {
  onFilesChange: (files: File[]) => void;
  acceptedTypes?: string;
  multiple?: boolean;
  className?: string;
}

export const FileUpload: React.FC<FileUploadProps> = ({
  onFilesChange,
  acceptedTypes = '.pdf,.doc,.docx,.jpg,.jpeg,.png',
  multiple = true,
  className
}) => {
  const [files, setFiles] = useState<FilePreview[]>([]);
  const [isDragOver, setIsDragOver] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const generatePreview = (file: File): Promise<string | undefined> => {
    return new Promise((resolve) => {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target?.result as string);
        reader.readAsDataURL(file);
      } else {
        resolve(undefined);
      }
    });
  };

  const handleFiles = async (newFiles: FileList | null) => {
    if (!newFiles) return;

    const fileArray = Array.from(newFiles);
    const filePreviews: FilePreview[] = [];

    for (const file of fileArray) {
      const preview = await generatePreview(file);
      filePreviews.push({
        file,
        id: Math.random().toString(36).substr(2, 9),
        preview
      });
    }

    const updatedFiles = multiple ? [...files, ...filePreviews] : filePreviews;
    setFiles(updatedFiles);
    onFilesChange(updatedFiles.map(f => f.file));
  };

  const removeFile = (id: string) => {
    const updatedFiles = files.filter(f => f.id !== id);
    setFiles(updatedFiles);
    onFilesChange(updatedFiles.map(f => f.file));
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFiles(e.dataTransfer.files);
  };

  const getFileIcon = (file: File) => {
    if (file.type.startsWith('image/')) {
      return <ImageIcon size={20} />;
    }
    return <FileText size={20} />;
  };

  return (
    <div className={cn('space-y-4', className)}>
      {files.length === 0 ? (
        <div
          className={cn(
            'border-2 border-dashed rounded-component p-8 text-center transition-colors',
            isDragOver 
              ? 'border-campus-green bg-campus-green/5' 
              : 'border-glass-border hover:border-campus-green/50'
          )}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <Upload size={48} className="mx-auto text-theme-text-muted mb-4" />
          <h4 className="text-lg font-medium text-theme-text mb-2">Upload Documents</h4>
          <p className="text-sm text-theme-text-secondary mb-4">
            Drag and drop your files here, or click to browse
          </p>
          <input
            ref={fileInputRef}
            type="file"
            multiple={multiple}
            accept={acceptedTypes}
            onChange={(e) => handleFiles(e.target.files)}
            className="hidden"
            id="file-upload"
          />
          <GlassButton
            variant="secondary"
            onClick={() => fileInputRef.current?.click()}
          >
            Browse Files
          </GlassButton>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {files.map((filePreview) => (
              <div
                key={filePreview.id}
                className="relative group bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component p-3"
              >
                <button
                  onClick={() => removeFile(filePreview.id)}
                  className="absolute -top-2 -right-2 w-6 h-6 bg-danger text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity z-10"
                >
                  <X size={14} />
                </button>
                
                <div className="aspect-square mb-2 rounded bg-theme-bg flex items-center justify-center overflow-hidden">
                  {filePreview.preview ? (
                    <img
                      src={filePreview.preview}
                      alt={filePreview.file.name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="text-theme-text-muted">
                      {getFileIcon(filePreview.file)}
                    </div>
                  )}
                </div>
                
                <p className="text-xs text-theme-text truncate" title={filePreview.file.name}>
                  {filePreview.file.name}
                </p>
                <p className="text-xs text-theme-text-secondary">
                  {(filePreview.file.size / 1024 / 1024).toFixed(2)} MB
                </p>
              </div>
            ))}
          </div>
          
          <div className="flex gap-3">
            <input
              ref={fileInputRef}
              type="file"
              multiple={multiple}
              accept={acceptedTypes}
              onChange={(e) => handleFiles(e.target.files)}
              className="hidden"
            />
            <GlassButton
              variant="secondary"
              onClick={() => fileInputRef.current?.click()}
              size="sm"
            >
              Add More Files
            </GlassButton>
            <GlassButton
              variant="danger"
              onClick={() => {
                setFiles([]);
                onFilesChange([]);
              }}
              size="sm"
            >
              Clear All
            </GlassButton>
          </div>
        </div>
      )}
    </div>
  );
};
FILE: src/components/ui/FloatingActionButton.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface FloatingActionButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  icon: React.ReactNode;
  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';
  size?: 'sm' | 'md' | 'lg';
}

export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({
  icon,
  position = 'bottom-right',
  size = 'md',
  className,
  ...props
}) => {
  const positions = {
    'bottom-right': 'bottom-6 right-6',
    'bottom-left': 'bottom-6 left-6',
    'top-right': 'top-6 right-6',
    'top-left': 'top-6 left-6',
  };

  const sizes = {
    sm: 'w-12 h-12',
    md: 'w-14 h-14',
    lg: 'w-16 h-16',
  };

  return (
    <button
      className={cn(
        'fixed z-50 rounded-full bg-campus-green text-white shadow-glass hover:bg-campus-green-hover hover:shadow-glass-hover transition-all duration-300 flex items-center justify-center backdrop-blur-glass border border-glass-border hover:scale-110 active:scale-95',
        positions[position],
        sizes[size],
        className
      )}
      {...props}
    >
      {icon}
    </button>
  );
};
FILE: src/components/ui/GlassButton.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface GlassButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  glow?: boolean;
}

export const GlassButton: React.FC<GlassButtonProps> = ({
  children,
  className,
  variant = 'primary',
  size = 'md',
  loading = false,
  glow = false,
  disabled,
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-component transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-bg disabled:opacity-50 disabled:cursor-not-allowed backdrop-blur-glass';
  
  const variants = {
    primary: 'bg-campus-green text-white hover:bg-campus-green-hover focus:ring-campus-green shadow-lg hover:shadow-xl',
    secondary: 'bg-glass-bg border border-glass-border text-theme-text hover:bg-glass-hover focus:ring-campus-green',
    success: 'bg-success text-white hover:bg-green-600 focus:ring-success shadow-lg hover:shadow-xl',
    danger: 'bg-danger text-white hover:bg-red-600 focus:ring-danger shadow-lg hover:shadow-xl',
    ghost: 'text-theme-text hover:bg-glass-bg focus:ring-campus-green',
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
  };

  return (
    <button
      className={cn(
        baseClasses,
        variants[variant],
        sizes[size],
        glow && 'animate-glow',
        className
      )}
      disabled={disabled || loading}
      {...props}
    >
      {loading && (
        <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {children}
    </button>
  );
};
FILE: src/components/ui/GlassCard.tsx
import React from 'react';
import { cn } from '../../utils/cn';

interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {
  hover?: boolean;
  padding?: 'none' | 'sm' | 'md' | 'lg';
  blur?: 'sm' | 'md' | 'lg';
}

export const GlassCard: React.FC<GlassCardProps> = ({ 
  children, 
  className, 
  hover = false, 
  padding = 'md',
  blur = 'md',
  ...props 
}) => {
  const paddingClasses = {
    none: '',
    sm: 'p-4',
    md: 'p-6',
    lg: 'p-8',
  };

  const blurClasses = {
    sm: 'backdrop-blur-sm',
    md: 'backdrop-blur-glass',
    lg: 'backdrop-blur-xl',
  };

  return (
    <div
      className={cn(
        'bg-glass-bg border border-glass-border rounded-glass shadow-glass transition-all duration-300',
        blurClasses[blur],
      hover && 'hover:bg-glass-hover hover:shadow-glass-hover hover:scale-[1.02]',
        paddingClasses[padding],
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
};
FILE: src/components/ui/GlassInput.tsx
import React, { useState } from 'react';
import { cn } from '../../utils/cn';

interface GlassInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  helperText?: string;
  error?: string;
  icon?: React.ReactNode;
}

export const GlassInput: React.FC<GlassInputProps> = ({
  label,
  helperText,
  error,
  icon,
  className,
  id,
  ...props
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [hasValue, setHasValue] = useState(!!props.value || !!props.defaultValue);
  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;

  const handleFocus = () => setIsFocused(true);
  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    setIsFocused(false);
    setHasValue(!!e.target.value);
    props.onBlur?.(e);
  };

  return (
    <div className="relative">
      <div className="relative">
        {icon && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-dark-text-muted">
            {icon}
          </div>
        )}
        <input
          id={inputId}
          className={cn(
            'peer w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text placeholder-transparent focus:outline-none focus:border-campus-green focus:shadow-glow transition-all duration-300',
            icon && 'pl-10',
            error && 'border-danger focus:border-danger focus:shadow-none',
            className
          )}
          onFocus={handleFocus}
          onBlur={handleBlur}
          {...props}
          placeholder=" "
        />
        {label && (
          <label
            htmlFor={inputId}
            className={cn(
              'absolute left-4 transition-all duration-300 pointer-events-none',
              icon && 'left-10',
              (isFocused || hasValue || props.value) 
                ? 'top-0 text-xs bg-theme-bg px-2 -translate-y-1/2 text-campus-green'
                : 'top-1/2 text-base -translate-y-1/2 text-theme-text-muted',
              error && 'text-danger'
            )}
          >
            {label}
          </label>
        )}
      </div>
      {(helperText || error) && (
        <p className={cn(
          'mt-2 text-sm',
          error ? 'text-danger' : 'text-theme-text-secondary'
        )}>
          {error || helperText}
        </p>
      )}
    </div>
  );
};
FILE: src/components/ui/Input.tsx
import React, { useState } from 'react';
import { cn } from '../../utils/cn';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  helperText?: string;
  error?: string;
  icon?: React.ReactNode;
}

export const Input: React.FC<InputProps> = ({
  label,
  helperText,
  error,
  icon,
  className,
  id,
  ...props
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [hasValue, setHasValue] = useState(!!props.value || !!props.defaultValue);
  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;

  const handleFocus = () => setIsFocused(true);
  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    setIsFocused(false);
    setHasValue(!!e.target.value);
    props.onBlur?.(e);
  };

  return (
    <div className="relative">
      <div className="relative">
        {icon && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
            {icon}
          </div>
        )}
        <input
          id={inputId}
          className={cn(
            'peer w-full px-3 py-3 border border-gray-300 rounded-component bg-white placeholder-transparent focus:outline-none focus:ring-2 focus:ring-campus-green focus:border-transparent transition-all',
            icon && 'pl-10',
            error && 'border-danger focus:ring-danger',
            className
          )}
          onFocus={handleFocus}
          onBlur={handleBlur}
          {...props}
          placeholder=" "
        />
        {label && (
          <label
            htmlFor={inputId}
            className={cn(
              'absolute left-3 transition-all duration-200 pointer-events-none',
              icon && 'left-10',
              (isFocused || hasValue || props.value) 
                ? 'top-0 text-xs bg-white px-1 -translate-y-1/2 text-campus-green'
                : 'top-1/2 text-base -translate-y-1/2 text-gray-400',
              error && 'text-danger'
            )}
          >
            {label}
          </label>
        )}
      </div>
      {(helperText || error) && (
        <p className={cn(
          'mt-1 text-sm',
          error ? 'text-danger' : 'text-gray-600'
        )}>
          {error || helperText}
        </p>
      )}
    </div>
  );
};
FILE: src/components/ui/Modal.tsx
import React, { useEffect } from 'react';
import { createPortal } from 'react-dom';
import { X } from 'lucide-react';
import { cn } from '../../utils/cn';
import { GlassCard } from './GlassCard';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
}) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
  };

  const modalContent = (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
      <div 
        className="fixed inset-0 bg-black/50 backdrop-blur-sm" 
        onClick={onClose}
      />
      <GlassCard 
        className={cn(
          'relative w-full max-h-[90vh] overflow-y-auto',
          sizeClasses[size]
        )}
        padding="none"
      >
        {title && (
          <div className="flex items-center justify-between p-6 border-b border-glass-border">
            <h2 className="text-xl font-semibold text-theme-text">{title}</h2>
            <button
              onClick={onClose}
              className="text-theme-text-muted hover:text-theme-text transition-colors p-1 rounded-component hover:bg-glass-hover"
            >
              <X size={24} />
            </button>
          </div>
        )}
        <div className="p-6">
          {children}
        </div>
      </GlassCard>
    </div>
  );

  return createPortal(modalContent, document.body);
};
FILE: src/components/ui/ProfileEditor.tsx
// frontend/src/components/ui/ProfileEditor.tsx
import React, { useState } from 'react';
import { useToast } from '../../context/ToastContext';
import { User as UserIcon, Camera, Save, X } from 'lucide-react';
import { GlassButton } from './GlassButton';
import { GlassInput } from './GlassInput';
import { Modal } from './Modal';
import { useAuth } from '../../context/AuthContext';

interface ProfileEditorProps {
  isOpen: boolean;
  onClose: () => void;
}

export const ProfileEditor: React.FC<ProfileEditorProps> = ({ isOpen, onClose }) => {
  const { user, updateUser, uploadProfilePicture } = useAuth();
  const { addToast } = useToast();
  const [formData, setFormData] = useState({
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    profilePicture: user?.profilePicture || '',
  });
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const baseUrl =
    (import.meta.env.VITE_API_URL?.replace(/\/+$/, '') as string) || 'http://localhost:8080';

  const toAbsolute = (u?: string | null) => {
    if (!u) return '';
    if (/^https?:\/\//i.test(u)) return u;
    return `${baseUrl}${u.startsWith('/') ? '' : '/'}${u}`;
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const reader = new FileReader();
      reader.onload = (event) => {
        const result = event.target?.result as string;
        setPreviewImage(result); // preview only
      };
      reader.readAsDataURL(file);
    }
  };

const handleSave = async () => {
  try {
    // Update basic fields locally
    if (
      formData.firstName !== user?.firstName ||
      formData.lastName !== user?.lastName
    ) {
      await updateUser({
        firstName: formData.firstName,
        lastName: formData.lastName,
      });
    }

    // Upload the image if chosen
    if (selectedFile) {
      await uploadProfilePicture(selectedFile);
    }

    addToast({ type: 'success', title: 'Profile updated' });
    onClose();
  } catch (err: any) {
    addToast({
      type: 'error',
      title: 'Upload failed',
      message: err?.message || 'Please try a different image.',
    });
  }
};

  const handleClose = () => {
    setFormData({
      firstName: user?.firstName || '',
      lastName: user?.lastName || '',
      profilePicture: user?.profilePicture || '',
    });
    setPreviewImage(null);
    setSelectedFile(null);
    onClose();
  };

  const currentSrc = previewImage
    ? previewImage
    : toAbsolute(formData.profilePicture || user?.profilePicture || '');

  return (
    <Modal isOpen={isOpen} onClose={handleClose} title="Edit Profile" size="md">
      <div className="space-y-6">
        {/* Profile Picture */}
        <div className="flex flex-col items-center space-y-4">
          <div className="relative">
            <div className="w-24 h-24 rounded-full overflow-hidden bg-glass-bg border-2 border-glass-border">
              {currentSrc ? (
                <img
                  src={currentSrc}
                  alt="Profile"
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  <UserIcon size={32} className="text-theme-text-muted" />
                </div>
              )}
            </div>
            <label
              htmlFor="profile-image"
              className="absolute bottom-0 right-0 w-8 h-8 bg-campus-green text-white rounded-full flex items-center justify-center cursor-pointer hover:bg-campus-green-hover transition-colors"
            >
              <Camera size={16} />
            </label>
            <input
              id="profile-image"
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden"
            />
          </div>
          <p className="text-sm text-theme-text-secondary">
            Click the camera icon to change your profile picture
          </p>
        </div>

        {/* Name Fields */}
        <div className="grid grid-cols-2 gap-4">
          <GlassInput
            label="First Name"
            value={formData.firstName}
            onChange={(e) => setFormData((prev) => ({ ...prev, firstName: e.target.value }))}
          />
          <GlassInput
            label="Last Name"
            value={formData.lastName}
            onChange={(e) => setFormData((prev) => ({ ...prev, lastName: e.target.value }))}
          />
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3 pt-4">
          <GlassButton variant="secondary" onClick={handleClose} className="flex-1">
            <X size={16} className="mr-2" />
            Cancel
          </GlassButton>
          <GlassButton variant="primary" onClick={handleSave} className="flex-1">
            <Save size={16} className="mr-2" />
            Save Changes
          </GlassButton>
        </div>
      </div>
    </Modal>
  );
};

FILE: src/components/ui/ThemeToggle.tsx
import React from 'react';
import { Sun, Moon } from 'lucide-react';
import { useTheme } from '../../context/ThemeContext';
import { GlassButton } from './GlassButton';

export const ThemeToggle: React.FC = () => {
  const { theme, toggleTheme } = useTheme();

  return (
    <GlassButton
      variant="ghost"
      size="sm"
      onClick={toggleTheme}
      className="p-2"
      title={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
    >
      {theme === 'dark' ? (
        <Sun size={20} className="text-yellow-400" />
      ) : (
        <Moon size={20} className="text-slate-600" />
      )}
    </GlassButton>
  );
};
FILE: src/context/AuthContext.tsx
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { User, UserRole } from "../types";
import {
  login as apiLogin,
  register as apiRegister,
  uploadProfilePicture as apiUploadProfilePicture,
} from "../lib/api";
import { BASE_URL } from "../lib/api";

interface SignupData {
  email: string;
  password: string;
  username: string;
  firstName: string;
  lastName: string;
  university: string;
  hall?: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  /** Normal login (real users). Later we’ll wire this to backend. */
  login: (email: string, password: string) => Promise<void>;
  /** Demo login (guest) that uses mock data only. */
  loginDemo: (role?: UserRole) => Promise<void>;
  signup: (userData: SignupData) => Promise<void>;
  logout: () => void;
  updateUser: (updates: Partial<User>) => void;
  addRole: (role: UserRole) => void;
  switchRole: (role: UserRole) => void;
  currentRole: UserRole;
  /** True if the current session is demo/guest (mock data only). */
  isDemo: boolean;
  isLoading: boolean;
  /** Upload and persist the user's profile picture */
  uploadProfilePicture: (file: File) => Promise<void>;
}

const roleHierarchy: UserRole[] = ["admin", "printer_owner", "user"];

function getHighestRole(roles: UserRole[]): UserRole {
  for (const role of roleHierarchy) {
    if (roles.includes(role)) {
      return role;
    }
  }
  return "user";
}

function fixUserPicture<T extends { profilePicture?: string | null }>(u: T): T {
  const pic = u?.profilePicture;
  if (!pic) return u;
  if (/^(https?:)?\/\//i.test(pic) || pic.startsWith("data:")) return u;
  // backend returns "/files/..." – make it absolute for the browser
  return {
    ...u,
    profilePicture: `${BASE_URL}${pic.startsWith("/") ? "" : "/"}${pic}`,
  };
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [currentRole, setCurrentRole] = useState<UserRole>("user");
  const [isLoading, setIsLoading] = useState(true);
  const [isDemo, setIsDemo] = useState<boolean>(false);

  useEffect(() => {
    // Restore session
    const storedUser = localStorage.getItem("user");
    const storedRole = localStorage.getItem("currentRole");
    const storedIsDemo = localStorage.getItem("isDemo");

    // read guest mode default from env if nothing stored
    const envGuest = (import.meta.env.VITE_GUEST_MODE ?? "")
      .toString()
      .trim()
      .toLowerCase();
    const envGuestOn =
      envGuest === "1" || envGuest === "true" || envGuest === "yes";

    if (storedUser) {
      const parsed = JSON.parse(storedUser);
      // Normalize any legacy role strings like "printer-owner" -> "printer_owner"
      const normalizedRoles = Array.isArray(parsed.roles)
        ? parsed.roles.map((r: string) =>
            r === "printer-owner" ? "printer_owner" : r
          )
        : ["user"];

      const userData = fixUserPicture({ ...parsed, roles: normalizedRoles });
      setUser(userData);

      // pick the highest role after normalization
      const highestRole = getHighestRole(userData.roles || []);
      setCurrentRole((storedRole as UserRole) || highestRole);
    }

    // prefer stored flag; otherwise default from env
    setIsDemo(storedIsDemo === "1" ? true : envGuestOn);
    setIsLoading(false);
  }, []);

  /**
   * Normal login — now calls the backend and blocks invalid credentials.
   * Demo/guest should use loginDemo() below.
   */
  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const res = await apiLogin({ email, password });
      if (!res.ok || !res.data) {
        // Make LoginPage show the red error box
        throw new Error(res.error?.message || "Invalid email or password");
      }

      // Persist real user + token
      const { user: realUser, token } = res.data;
      const fixed = fixUserPicture(realUser as User);
      setUser(fixed);
      const highestRole = getHighestRole(fixed.roles || []);
      setCurrentRole(highestRole);
      setIsDemo(false);

      localStorage.setItem("user", JSON.stringify(fixed));
      localStorage.setItem("currentRole", highestRole);
      localStorage.setItem("isDemo", "0");
      localStorage.setItem("auth_token", token);
    } catch (err: any) {
      // Important: rethrow so LoginPage catch runs and shows the error
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Demo/guest login — forces demo mode and injects a guest user.
   * This is what “Continue as Guest (Demo)” will call.
   */
  const loginDemo = async (role: UserRole = "user") => {
    setIsLoading(true);

    // Simulate latency
    await new Promise((resolve) => setTimeout(resolve, 300));

    const guest: User = {
      id: "guest",
      email: "guest@demo.local",
      username: "guest",
      firstName: "Guest",
      lastName: "User",
      profilePicture:
        "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=100",
      credits: 99.99,
      roles:
        role === "admin"
          ? ["admin", "printer_owner", "user"]
          : role === "printer_owner"
          ? ["printer_owner", "user"]
          : ["user"],
      university: "Campus University",
      hall: "Demo Hall",
      createdAt: new Date().toISOString(),
    };

    setUser(guest);
    const highestRole = getHighestRole(guest.roles);
    setCurrentRole(highestRole);
    setIsDemo(true);

    localStorage.setItem("user", JSON.stringify(guest));
    localStorage.setItem("currentRole", highestRole);
    localStorage.setItem("isDemo", "1");

    setIsLoading(false);
  };

  const signup = async (userData: SignupData) => {
    setIsLoading(true);
    try {
      const res = await apiRegister({
        email: userData.email,
        password: userData.password,
        username: userData.username,
        firstName: userData.firstName,
        lastName: userData.lastName,
        university: userData.university, // NEW
        hall: userData.hall, // NEW (optional)
      });

      if (!res.ok || !res.data) {
        throw new Error(res.error?.message || "Failed to create account");
      }

      const { user: realUser, token } = res.data;
      const fixed = fixUserPicture(realUser as User);
      setUser(fixed);
      setCurrentRole("user");
      setIsDemo(false);

      localStorage.setItem("user", JSON.stringify(fixed));
      localStorage.setItem("currentRole", "user");
      localStorage.setItem("isDemo", "0");
      localStorage.setItem("auth_token", token);
    } catch (err) {
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const uploadProfilePicture = async (file: File) => {
    if (!user) throw new Error("Not logged in");
    setIsLoading(true);
    try {
      const res = await apiUploadProfilePicture(String(user.id), file);
      if (!res.ok || !res.data) {
        throw new Error(res.error?.message || `Upload failed (${res.status})`);
      }

      // Backend returns { message, url, user }. Prefer the returned user if present.
      const returnedUser = (res.data as any).user as User | undefined;
      const returnedUrl = (res.data as any).url as string | undefined;

      // Add a cache-busting query so the <img> re-fetches immediately.
      const bust = (u?: string | null) =>
        !u ? u : `${u}${u.includes("?") ? "&" : "?"}v=${Date.now()}`;

      // Build the next user object and make the profilePicture absolute (fixUserPicture)
      const nextUser: User = fixUserPicture(
        returnedUser
          ? {
              ...returnedUser,
              profilePicture: bust(returnedUser.profilePicture) as any,
            }
          : {
              ...user,
              profilePicture: bust(returnedUrl || user.profilePicture) as any,
            }
      );

      setUser(nextUser);
      localStorage.setItem("user", JSON.stringify(nextUser));

      // Let other screens (e.g., Admin) update their local lists immediately
      window.dispatchEvent(
        new CustomEvent("auth:user-updated", { detail: nextUser })
      );
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    setCurrentRole("user"); // keep type-safe default
    setIsDemo(false);
    localStorage.removeItem("user");
    localStorage.removeItem("currentRole");
    localStorage.removeItem("isDemo");
    localStorage.removeItem("auth_token");
  };

  const updateUser = (updates: Partial<User>) => {
    if (user) {
      const updatedUser = { ...user, ...updates };
      setUser(updatedUser);
      localStorage.setItem("user", JSON.stringify(updatedUser));
    }
  };

  const addRole = (role: UserRole) => {
    if (user && !user.roles.includes(role)) {
      const updatedUser = { ...user, roles: [...user.roles, role] };
      setUser(updatedUser);
      localStorage.setItem("user", JSON.stringify(updatedUser));
    }
  };

  const switchRole = (role: UserRole) => {
    if (user && user.roles.includes(role)) {
      setCurrentRole(role);
      localStorage.setItem("currentRole", role);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        login,
        loginDemo,
        signup,
        logout,
        updateUser,
        addRole,
        switchRole,
        currentRole,
        isDemo,
        isLoading,
        uploadProfilePicture, // NEW
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

FILE: src/context/ThemeContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
  isDark: boolean;
  isLight: boolean;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

interface ThemeProviderProps {
  children: ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>(() => {
    const stored = localStorage.getItem('theme');
    return (stored as Theme) || 'dark';
  });

  useEffect(() => {
    localStorage.setItem('theme', theme);
    
    // Update document class for theme
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      document.documentElement.classList.remove('light');
    } else {
      document.documentElement.classList.add('light');
      document.documentElement.classList.remove('dark');
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'dark' ? 'light' : 'dark');
  };

  return (
    <ThemeContext.Provider value={{
      theme,
      toggleTheme,
      isDark: theme === 'dark',
      isLight: theme === 'light',
    }}>
      {children}
    </ThemeContext.Provider>
  );
};
FILE: src/context/ToastContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Check, X, AlertCircle, Info } from 'lucide-react';

export type ToastType = 'success' | 'error' | 'warning' | 'info';

interface Toast {
  id: string;
  type: ToastType;
  title: string;
  message?: string;
  duration?: number;
}

interface ToastContextType {
  toasts: Toast[];
  addToast: (toast: Omit<Toast, 'id'>) => void;
  removeToast: (id: string) => void;
}

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const useToast = () => {
  const context = useContext(ToastContext);
  if (context === undefined) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};

interface ToastProviderProps {
  children: ReactNode;
}

const ToastIcon: React.FC<{ type: ToastType }> = ({ type }) => {
  const iconProps = { size: 20 };
  
  switch (type) {
    case 'success':
      return <Check {...iconProps} className="text-success" />;
    case 'error':
      return <X {...iconProps} className="text-danger" />;
    case 'warning':
      return <AlertCircle {...iconProps} className="text-warning" />;
    case 'info':
      return <Info {...iconProps} className="text-blue-500" />;
    default:
      return <Info {...iconProps} />;
  }
};

const ToastItem: React.FC<{ toast: Toast; onRemove: (id: string) => void }> = ({ toast, onRemove }) => {
  React.useEffect(() => {
    const timer = setTimeout(() => {
      onRemove(toast.id);
    }, toast.duration || 5000);

    return () => clearTimeout(timer);
  }, [toast.id, toast.duration, onRemove]);

  return (
    <div className="flex items-start gap-3 p-4 bg-white rounded-component shadow-card border border-gray-200 min-w-80 max-w-md">
      <ToastIcon type={toast.type} />
      <div className="flex-1">
        <p className="font-medium text-gray-900">{toast.title}</p>
        {toast.message && (
          <p className="text-sm text-gray-600 mt-1">{toast.message}</p>
        )}
      </div>
      <button
        onClick={() => onRemove(toast.id)}
        className="text-gray-400 hover:text-gray-600 transition-colors"
      >
        <X size={16} />
      </button>
    </div>
  );
};

export const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const addToast = (toast: Omit<Toast, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    setToasts(prev => [...prev, { ...toast, id }]);
  };

  const removeToast = (id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>
      {children}
      <div className="fixed top-4 right-4 z-50 flex flex-col gap-2">
        {toasts.map(toast => (
          <ToastItem key={toast.id} toast={toast} onRemove={removeToast} />
        ))}
      </div>
    </ToastContext.Provider>
  );
};
FILE: src/context/UserContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';

export type UserRole = 'student' | 'printer-owner' | 'admin';

interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  credits: number;
  avatar?: string;
}

interface UserContextType {
  user: User | null;
  setUser: (user: User | null) => void;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  switchRole: (role: UserRole) => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const useUser = () => {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
};

interface UserProviderProps {
  children: ReactNode;
}

export const UserProvider: React.FC<UserProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>({
    id: '1',
    name: 'John Doe',
    email: 'john@university.edu',
    role: 'student',
    credits: 25.50,
    avatar: undefined,
  });

  const login = async (email: string, password: string) => {
    // Mock login - in real app, this would make an API call
    const mockUser: User = {
      id: '1',
      name: 'John Doe',
      email,
      role: 'student',
      credits: 25.50,
    };
    setUser(mockUser);
  };

  const logout = () => {
    setUser(null);
  };

  const switchRole = (role: UserRole) => {
    if (user) {
      setUser({ ...user, role });
    }
  };

  return (
    <UserContext.Provider value={{ user, setUser, login, logout, switchRole }}>
      {children}
    </UserContext.Provider>
  );
};
FILE: src/data/activities.json
{
  "activities": {
    "user": [
      {
        "id": 1,
        "action": "Printed lecture notes",
        "time": "2 hours ago",
        "status": "completed"
      },
      {
        "id": 2,
        "action": "Uploaded research paper",
        "time": "1 day ago",
        "status": "pending"
      },
      {
        "id": 3,
        "action": "Added ৳20 credits",
        "time": "3 days ago",
        "status": "completed"
      }
    ],
    "printer-owner": [
      {
        "id": 1,
        "action": "Job completed - Biology notes",
        "time": "30 minutes ago",
        "status": "completed"
      },
      {
        "id": 2,
        "action": "New print request",
        "time": "1 hour ago",
        "status": "pending"
      },
      {
        "id": 3,
        "action": "Printer maintenance completed",
        "time": "2 hours ago",
        "status": "completed"
      }
    ],
    "admin": [
      {
        "id": 1,
        "action": "New printer registered",
        "time": "1 hour ago",
        "status": "pending"
      },
      {
        "id": 2,
        "action": "User report resolved",
        "time": "2 hours ago",
        "status": "completed"
      },
      {
        "id": 3,
        "action": "System maintenance completed",
        "time": "1 day ago",
        "status": "completed"
      }
    ]
  }
}
FILE: src/data/deliveries.json
{
  "deliveries": [
    {
      "id": "delivery-1",
      "userId": "user-1",
      "userName": "Sarah Johnson",
      "userProfilePicture": "https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?auto=compress&cs=tinysrgb&w=100",
      "items": [
        {
          "name": "Lecture Notes",
          "quantity": 1,
          "description": "15 pages, printed documents",
          "image": "https://images.pexels.com/photos/159711/books-bookstore-book-reading-159711.jpeg?auto=compress&cs=tinysrgb&w=200"
        },
        {
          "name": "Assignment Sheet",
          "quantity": 1,
          "description": "2 pages"
        }
      ],
      "pickupLocation": {
        "university": "Campus University",
        "hall": "Library",
        "room": "Printing Station"
      },
      "deliveryLocation": {
        "university": "Campus University",
        "hall": "Residence Hall B",
        "room": "204"
      },
      "payment": 8.50,
      "status": "pending",
      "createdAt": "2024-01-21T10:00:00Z",
      "urgency": "medium"
    },
    {
      "id": "delivery-2",
      "userId": "user-2",
      "userName": "Mike Chen",
      "userProfilePicture": "https://images.pexels.com/photos/614810/pexels-photo-614810.jpeg?auto=compress&cs=tinysrgb&w=100",
      "items": [
        {
          "name": "Research Paper",
          "quantity": 1,
          "description": "25 pages, color printed",
          "image": "https://images.pexels.com/photos/590016/pexels-photo-590016.jpeg?auto=compress&cs=tinysrgb&w=200"
        },
        {
          "name": "Bibliography",
          "quantity": 1,
          "description": "5 pages"
        }
      ],
      "pickupLocation": {
        "university": "Campus University",
        "hall": "Engineering Building",
        "room": "Print Lab"
      },
      "deliveryLocation": {
        "university": "Campus University",
        "hall": "Library",
        "room": "Study Room 12"
      },
      "payment": 12.00,
      "status": "pending",
      "createdAt": "2024-01-21T11:00:00Z",
      "urgency": "high"
    },
    {
      "id": "delivery-3",
      "userId": "user-3",
      "userName": "Emma Davis",
      "userProfilePicture": "https://images.pexels.com/photos/733872/pexels-photo-733872.jpeg?auto=compress&cs=tinysrgb&w=100",
      "items": [
        {
          "name": "Class Handouts",
          "quantity": 1,
          "description": "8 pages",
          "image": "https://images.pexels.com/photos/301920/pexels-photo-301920.jpeg?auto=compress&cs=tinysrgb&w=200"
        }
      ],
      "pickupLocation": {
        "university": "Campus University",
        "hall": "Student Union",
        "room": "Print Center"
      },
      "deliveryLocation": {
        "university": "Campus University",
        "hall": "Student Union",
        "room": "Café"
      },
      "payment": 6.75,
      "status": "accepted",
      "acceptedBy": "delivery-person-1",
      "createdAt": "2024-01-21T11:30:00Z",
      "urgency": "low"
    }
  ]
}
FILE: src/data/printers.json
{
  "printers": [
    {
      "id": "printer-1",
      "name": "QuickPrint Pro",
      "ownerId": "user-2",
      "ownerName": "John Owner",
      "type": "both",
      "pricePerPageBW": 0.10,
      "pricePerPageColor": 0.25,
      "location": {
        "university": "Campus University",
        "hall": "Library",
        "room": "2nd Floor"
      },
      "specifications": {
        "brand": "HP",
        "model": "LaserJet Pro",
        "paperSizes": ["A4", "Letter", "Legal"],
        "features": ["Duplex", "Stapling"]
      },
      "status": "online",
      "isApproved": true,
      "rating": 4.8,
      "totalJobs": 1250,
      "createdAt": "2024-01-05T12:00:00Z"
    },
    {
      "id": "printer-2",
      "name": "Student Center Printer",
      "ownerId": "user-2",
      "ownerName": "Print Hub LLC",
      "type": "bw",
      "pricePerPageBW": 0.08,
      "pricePerPageColor": 0,
      "location": {
        "university": "Campus University",
        "hall": "Student Union",
        "room": "Ground Floor"
      },
      "specifications": {
        "brand": "Canon",
        "model": "ImageRunner",
        "paperSizes": ["A4", "Letter"],
        "features": ["Duplex"]
      },
      "status": "online",
      "isApproved": true,
      "rating": 4.5,
      "totalJobs": 890,
      "createdAt": "2024-01-08T14:30:00Z"
    },
    {
      "id": "printer-3",
      "name": "Engineering Lab Printer",
      "ownerId": "user-2",
      "ownerName": "TechPrint Solutions",
      "type": "color",
      "pricePerPageBW": 0.12,
      "pricePerPageColor": 0.30,
      "location": {
        "university": "Campus University",
        "hall": "Engineering Building",
        "room": "Room 205"
      },
      "specifications": {
        "brand": "Epson",
        "model": "WorkForce Pro",
        "paperSizes": ["A4", "Letter", "A3"],
        "features": ["Color", "High Resolution"]
      },
      "status": "busy",
      "isApproved": true,
      "rating": 4.9,
      "totalJobs": 650,
      "createdAt": "2024-01-12T09:45:00Z"
    },
    {
      "id": "printer-4",
      "name": "Pending Approval Printer",
      "ownerId": "user-2",
      "ownerName": "John Owner",
      "type": "color",
      "pricePerPageBW": 0.12,
      "pricePerPageColor": 0.30,
      "location": {
        "university": "Campus University",
        "hall": "Engineering Building",
        "room": "Room 205"
      },
      "specifications": {
        "brand": "Canon",
        "model": "PIXMA Pro",
        "paperSizes": ["A4", "Letter"],
        "features": ["Color", "High Resolution"]
      },
      "status": "offline",
      "isApproved": false,
      "rating": 0,
      "totalJobs": 0,
      "createdAt": "2024-01-20T16:20:00Z"
    }
  ]
}
FILE: src/data/reviews.json
{
  "reviews": [
    {
      "id": "1",
      "name": "Sarah Johnson",
      "avatar": "https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?auto=compress&cs=tinysrgb&w=100",
      "rating": 5,
      "comment": "Amazing service! Got my documents printed and delivered within an hour. The quality was perfect.",
      "serviceType": "printing"
    },
    {
      "id": "2",
      "name": "Mike Chen",
      "avatar": "https://images.pexels.com/photos/614810/pexels-photo-614810.jpeg?auto=compress&cs=tinysrgb&w=100",
      "rating": 5,
      "comment": "Love being a printer owner on this platform. Great way to earn extra income with my printer.",
      "serviceType": "printing"
    },
    {
      "id": "3",
      "name": "Emma Davis",
      "avatar": "https://images.pexels.com/photos/733872/pexels-photo-733872.jpeg?auto=compress&cs=tinysrgb&w=100",
      "rating": 4,
      "comment": "Delivery service is super convenient. Perfect for when I'm stuck in the library studying.",
      "serviceType": "delivery"
    }
  ]
}
FILE: src/data/users.json
{
  "users": [
    {
      "id": "user-1",
      "email": "student@campus.edu",
      "username": "student123",
      "firstName": "Javier",
      "lastName": "Student",
      "profilePicture": "https://images.pexels.com/photos/91227/pexels-photo-91227.jpeg?auto=compress&cs=tinysrgb&w=100",
      "credits": 45.50,
      "roles": ["user"],
      "university": "Campus University",
      "hall": "Residence Hall A",
      "createdAt": "2024-01-15T10:30:00Z"
    },
    {
      "id": "user-2",
      "email": "owner@campus.edu",
      "username": "printerowner",
      "firstName": "John",
      "lastName": "Owner",
      "profilePicture": "https://images.pexels.com/photos/614810/pexels-photo-614810.jpeg?auto=compress&cs=tinysrgb&w=100",
      "credits": 250.75,
      "roles": ["printer-owner", "user"],
      "university": "Campus University",
      "hall": "Engineering Hall",
      "createdAt": "2024-01-10T08:15:00Z"
    },
    {
      "id": "admin-1",
      "email": "admin@campus.edu",
      "username": "admin",
      "firstName": "Admin",
      "lastName": "User",
      "profilePicture": "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=100",
      "credits": 1000.00,
      "roles": ["admin", "printer-owner", "user"],
      "university": "Campus University",
      "hall": "Admin Building",
      "createdAt": "2024-01-01T00:00:00Z"
    }
  ]
}
FILE: src/dev/ApiProbe.tsx
// src/dev/ApiProbe.tsx
import React, { useState } from "react";
import { login, listUsers, listPrinters } from "../lib/api";

export default function ApiProbe() {
  const [out, setOut] = useState<string>("");

  async function tryLogin() {
    const res = await login({ email: "admin2@campus.edu", password: "admin2pass" });
    setOut(JSON.stringify(res, null, 2));
  }

  async function tryUsers() {
    const res = await listUsers();
    setOut(JSON.stringify(res, null, 2));
  }

  async function tryPrinters() {
    const res = await listPrinters();
    setOut(JSON.stringify(res, null, 2));
  }

  return (
    <div style={{ padding: 24, fontFamily: "system-ui, sans-serif" }}>
      <h1>API Probe</h1>
      <p>BASE_URL = import.meta.env.VITE_API_URL</p>
      <div style={{ display: "flex", gap: 12, marginBottom: 12 }}>
        <button onClick={tryLogin}>Login (admin2)</button>
        <button onClick={tryUsers}>List Users</button>
        <button onClick={tryPrinters}>List Printers</button>
      </div>
      <pre style={{ padding: 12, background: "#111", color: "#eee", borderRadius: 8, overflowX: "auto" }}>{out}</pre>
    </div>
  );
}

FILE: src/lib/api.ts
// src/lib/api.ts
// Small, dependency-free API client for talking to the Spring Boot backend.

export const BASE_URL =
  import.meta.env.VITE_API_URL?.replace(/\/+$/, "") || "http://localhost:8080";

export type HttpMethod = "GET" | "POST" | "PUT" | "PATCH" | "DELETE";

export interface ApiOptions<TBody = unknown> {
  method?: HttpMethod;
  path: string;             // e.g. "/api/auth/login"
  body?: TBody;             // will be JSON.stringified if provided
  token?: string | null;    // optional dummy token for later
  signal?: AbortSignal;
}

export interface ApiResponse<T> {
  ok: boolean;
  status: number;
  data?: T;
  error?: { message: string };
}

export async function api<TResp = unknown, TBody = unknown>(opts: ApiOptions<TBody>): Promise<ApiResponse<TResp>> {
  const url = `${BASE_URL}${opts.path.startsWith("/") ? "" : "/"}${opts.path}`;
  const headers: Record<string, string> = {
    "Accept": "application/json"
  };
  const init: RequestInit = {
    method: opts.method || "GET",
    headers,
    signal: opts.signal
  };

  if (opts.body !== undefined) {
    headers["Content-Type"] = "application/json"; // JSON only – do NOT use this for multipart
    init.body = JSON.stringify(opts.body);
  }

  // Prefer explicit token, otherwise fall back to stored one
  const authToken =
    opts.token ?? (typeof window !== "undefined" ? localStorage.getItem("auth_token") : null);
  if (authToken) {
    headers["Authorization"] = `Bearer ${authToken}`;
  }

  try {
    const res = await fetch(url, init);
    const isJson = res.headers.get("content-type")?.includes("application/json");
    const payload = isJson ? await res.json() : undefined;

    if (!res.ok) {
      const message = (payload?.message as string) || `HTTP ${res.status}`;
      return { ok: false, status: res.status, error: { message } };
    }
    return { ok: true, status: res.status, data: payload as TResp };
  } catch (e: any) {
    return { ok: false, status: 0, error: { message: e?.message || "Network error" } };
  }
}

// Convenience wrappers for our current backend:
// - POST /api/auth/login
// - POST /api/auth/register
// - GET  /api/users
// - GET  /api/printers

export type LoginReq = { email: string; password: string };
export type LoginResp = { user: any; token: string };

export async function login(body: LoginReq) {
  return api<LoginResp, LoginReq>({ method: "POST", path: "/api/auth/login", body });
}

export type RegisterReq = {
  email: string;
  password: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  // If you already added university/hall on the backend, you can extend the type here too:
  university?: string;
  hall?: string;
};
export type RegisterResp = { user: any; token: string };

export async function register(body: RegisterReq) {
  return api<RegisterResp, RegisterReq>({ method: "POST", path: "/api/auth/register", body });
}

export async function listUsers() {
  return api<any[]>({ method: "GET", path: "/api/users" });
}


/** ORDERS API **/
export async function listOrders() {
  return api<any[]>({ method: "GET", path: "/api/orders" });
}

export async function listOrdersByUser(userId: string) {
  return api<any[]>({
    method: "GET",
    path: `/api/orders/by-user/${encodeURIComponent(userId)}`,
  });
}

export async function createOrder(body: any) {
  // body should match frontend PrintJob fields you send (id/userId/printerId/...),
  // backend will store JSON as-is.
  return api<any, any>({
    method: "POST",
    path: "/api/orders",
    body,
  });
}


/**
 * Upload a profile picture for a user.
 * POST /api/users/{id}/profile-picture  (multipart/form-data, part name: "file")
 * Returns the updated user (recommended) or an object containing the profilePicture URL.
 */
export async function uploadProfilePicture(userId: string, file: File): Promise<ApiResponse<any>> {
  const url = `${BASE_URL}/api/users/${encodeURIComponent(userId)}/profile-picture`;
  const form = new FormData();
  form.append("file", file);

  // IMPORTANT: do NOT set Content-Type manually for multipart/form-data
  const headers: Record<string, string> = {};
  const token = typeof window !== "undefined" ? localStorage.getItem("auth_token") : null;
  if (token) headers["Authorization"] = `Bearer ${token}`;

  try {
    const res = await fetch(url, { method: "POST", headers, body: form });
    const isJson = res.headers.get("content-type")?.includes("application/json");
    const payload = isJson ? await res.json() : undefined;

    if (!res.ok) {
      const message = (payload?.message as string) || `HTTP ${res.status}`;
      return { ok: false, status: res.status, error: { message } };
    }
    return { ok: true, status: res.status, data: payload };
  } catch (e: any) {
    return { ok: false, status: 0, error: { message: e?.message || "Network error" } };
  }
}

export function toMediaUrl(path?: string | null) {
  if (!path) return "";
  const s = String(path);
  if (/^(https?:)?\/\//i.test(s) || s.startsWith("data:")) return s;
  if (s.startsWith("/")) return `${BASE_URL}${s}`;
  return `${BASE_URL}/${s}`;
}

/** PRINTERS API **/
export async function listPrinters(ownerId?: string) {
  const path = ownerId ? `/api/printers?ownerId=${encodeURIComponent(ownerId)}` : "/api/printers";
  return api<any[]>({ method: "GET", path });
}
export async function getPrinter(id: string) {
  return api<any>({ method: "GET", path: `/api/printers/${encodeURIComponent(id)}` });
}
export async function createPrinter(body: any) {
  return api<any, any>({ method: "POST", path: "/api/printers", body });
}

export type PrinterUpdatePayload = {
  name?: string;
  type?: 'color' | 'bw' | 'both';
  pricePerPageBW?: number;
  pricePerPageColor?: number;
  status?: 'online' | 'offline' | 'maintenance' | 'pending' | 'declined';
  location?: {
    university?: string;
    hall?: string;
    room?: string;
  };
  specifications?: {
    brand?: string;
    model?: string;
    paperSizes?: string[];
    features?: string[];
  };
};

export async function updatePrinter(id: string, body: PrinterUpdatePayload) {
  return api<any, any>({ method: "PUT", path: `/api/printers/${encodeURIComponent(id)}`, body });
}
export async function approvePrinter(id: string) {
  return api<any>({ method: "POST", path: `/api/printers/${encodeURIComponent(id)}/approve` });
}
export async function deletePrinter(id: string) {
  return api<void>({ method: "DELETE", path: `/api/printers/${encodeURIComponent(id)}` });
}

FILE: src/lib/auth.ts
export type Role = 'user' | 'printer_owner' | 'admin';
export type Me = { id: number; email: string; role: Role };

const TOKEN_KEY = 'pnp_token';

export function getToken(): string | null {
  return localStorage.getItem(TOKEN_KEY);
}

export function setToken(token: string) {
  localStorage.setItem(TOKEN_KEY, token);
}

export function clearToken() {
  localStorage.removeItem(TOKEN_KEY);
}

export async function fetchWithAuth(path: string, init: RequestInit = {}) {
  const base = import.meta.env.VITE_API_BASE || 'http://localhost:8080/api';
  const headers = new Headers(init.headers || {});
  const token = getToken();
  if (token) headers.set('Authorization', `Bearer ${token}`);
  headers.set('Content-Type', 'application/json');
  const res = await fetch(`${base}${path}`, { ...init, headers });
  return res;
}

export async function login(email: string) {
  const res = await fetchWithAuth('/auth/login', {
    method: 'POST',
    body: JSON.stringify({ email })
  });
  const json = await res.json();
  if (!json.success) throw new Error(json.error || 'Login failed');
  setToken(json.data.token);
  return json.data.user as Me;
}

export async function me(): Promise<Me | null> {
  const res = await fetchWithAuth('/auth/me');
  const json = await res.json();
  if (!json.success) return null;
  return json.data as Me;
}

FILE: src/pages/AdminPage.tsx
import React, { useState, useEffect } from "react";
import {
  Users,
  Printer,
  BarChart3,
  CheckCircle,
  XCircle,
  Eye,
  Trash2,
  Edit,
} from "lucide-react";
import { GlassCard } from "../components/ui/GlassCard";
import { GlassButton } from "../components/ui/GlassButton";
import { GlassInput } from "../components/ui/GlassInput";
import ConfirmDialog from "../components/ui/ConfirmDialog";
import { toMediaUrl } from "../lib/api";
import { useToast } from "../context/ToastContext";
import {
  listUsers,
  listPrinters,
  approvePrinter,
  updatePrinter,
  deletePrinter,
} from "../lib/api";

import { User, Printer as PrinterType } from "../types";

type EditablePrinterStatus =
  | PrinterType["status"]
  | "pending"
  | "declined"
  | "rejected";

export const AdminPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<
    "users" | "printers" | "analytics"
  >("users");
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [selectedPrinter, setSelectedPrinter] = useState<PrinterType | null>(
    null
  );
  const [users, setUsers] = useState<User[]>([]);
  const [printers, setPrinters] = useState<PrinterType[]>([]);
  const [editPrinterModal, setEditPrinterModal] = useState<PrinterType | null>(
    null
  );
  const [editPrinterForm, setEditPrinterForm] = useState({
    name: "",
    type: "both" as PrinterType["type"],
    pricePerPageBW: "",
    pricePerPageColor: "",
    brand: "",
    model: "",
    paperSizes: "A4,Letter",
    features: "",
    university: "",
    hall: "",
    room: "",
    status: "pending" as EditablePrinterStatus,
    isApproved: false,
  });
  const [isSavingPrinter, setIsSavingPrinter] = useState(false);
  const [deletePrinterTarget, setDeletePrinterTarget] = useState<PrinterType | null>(
    null
  );
  const [isDeletingPrinter, setIsDeletingPrinter] = useState(false);
  const statusOptions: EditablePrinterStatus[] = [
    "pending",
    "online",
    "offline",
    "busy",
    "maintenance",
    "declined",
    "rejected",
  ];
  const { addToast } = useToast();

  // Set active tab based on URL hash or default to users
  useEffect(() => {
    const hash = window.location.hash.replace("#", "");
    if (hash && ["users", "printers", "analytics"].includes(hash)) {
      setActiveTab(hash as "users" | "printers" | "analytics");
    }
  }, []);

  // Always load from backend (no demo JSON)
  useEffect(() => {
    let canceled = false;

    async function load() {
      const [uRes, pRes] = await Promise.all([listUsers(), listPrinters()]);
      if (canceled) return;

      setUsers(Array.isArray(uRes.data) ? (uRes.data as User[]) : []);
      setPrinters(Array.isArray(pRes.data) ? (pRes.data as PrinterType[]) : []);
    }

    load();
    return () => {
      canceled = true;
    };
  }, []);

  // When the logged-in user's profile is updated, patch our local list so avatars refresh instantly
  useEffect(() => {
    function onUserUpdated(e: Event) {
      const detail = (e as CustomEvent<User>).detail;
      if (!detail?.id) return;

      setUsers(prev =>
        prev.map(u => (u.id === detail.id ? { ...u, profilePicture: detail.profilePicture } : u))
      );
      setSelectedUser(prev =>
        prev && prev.id === detail.id ? { ...prev, profilePicture: detail.profilePicture } : prev
      );
    }

    window.addEventListener("auth:user-updated", onUserUpdated as EventListener);
    return () => window.removeEventListener("auth:user-updated", onUserUpdated as EventListener);
  }, []);


const handleApprovePrinter = async (printerId: string) => {
  const res = await approvePrinter(printerId);
  if (!res.ok || !res.data) {
    addToast({
      type: "error",
      title: "Approve failed",
      message: res.error?.message || `Printer ${printerId} could not be approved`,
    });
    return;
  }
  const updated = res.data as PrinterType;
  setPrinters(prev => prev.map(p => (p.id === printerId ? (updated as any) : p)));
  addToast({ type: "success", title: "Printer approved", message: `${updated.name} is now online` });
};

  const handleRejectPrinter = (printerId: string) => {
    addToast({
      type: "info",
      title: "Printer Rejected",
      message: "The printer application has been rejected.",
    });
  };

  const openEditPrinter = (printer: PrinterType) => {
    setEditPrinterModal(printer);
    setEditPrinterForm({
      name: printer.name,
      type: printer.type,
      pricePerPageBW: printer.pricePerPageBW.toString(),
      pricePerPageColor: printer.pricePerPageColor.toString(),
      brand: printer.specifications.brand,
      model: printer.specifications.model,
      paperSizes: printer.specifications.paperSizes.join(","),
      features: printer.specifications.features.join(","),
      university: printer.location.university,
      hall: printer.location.hall,
      room: printer.location.room || "",
      status: (printer.status as EditablePrinterStatus) || "pending",
      isApproved: Boolean(printer.isApproved),
    });
  };

  const handleEditPrinterInput = (
    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = event.target;

    if (name === "isApproved") {
      setEditPrinterForm((prev) => ({
        ...prev,
        isApproved: (event.target as HTMLInputElement).checked,
      }));
      return;
    }

    if (name === "type") {
      setEditPrinterForm((prev) => ({ ...prev, type: value as PrinterType["type"] }));
      return;
    }

    if (name === "status") {
      setEditPrinterForm((prev) => ({ ...prev, status: value as EditablePrinterStatus }));
      return;
    }

    setEditPrinterForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSavePrinter = async () => {
    if (!editPrinterModal) return;
    setIsSavingPrinter(true);

    try {
      const paperSizes = editPrinterForm.paperSizes
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean);
      const features = editPrinterForm.features
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean);

      const payload = {
        name: editPrinterForm.name,
        type: editPrinterForm.type,
        pricePerPageBW: Number(editPrinterForm.pricePerPageBW || 0),
        pricePerPageColor: Number(editPrinterForm.pricePerPageColor || 0),
        location: {
          university: editPrinterForm.university || "",
          hall: editPrinterForm.hall || "",
          room: editPrinterForm.room || "",
        },
        specifications: {
          brand: editPrinterForm.brand || "",
          model: editPrinterForm.model || "",
          paperSizes,
          features,
        },
        status: editPrinterForm.status,
        isApproved: editPrinterForm.isApproved,
      };

      const res = await updatePrinter(editPrinterModal.id, payload);
      if (!res.ok || !res.data) {
        throw new Error(res.error?.message || "Update failed");
      }

      const updated = res.data as PrinterType;
      setPrinters((prev) => prev.map((p) => (p.id === updated.id ? updated : p)));
      setSelectedPrinter((prev) => (prev && prev.id === updated.id ? updated : prev));

      addToast({
        type: "success",
        title: "Printer updated",
        message: `${updated.name} has been updated successfully.`,
      });
      setEditPrinterModal(null);
    } catch (error: any) {
      addToast({
        type: "error",
        title: "Update failed",
        message: error?.message || "Unable to update printer.",
      });
    } finally {
      setIsSavingPrinter(false);
    }
  };

  const requestRemovePrinter = (printer: PrinterType) => {
    setDeletePrinterTarget(printer);
  };

  const confirmRemovePrinter = async () => {
    if (!deletePrinterTarget) return;
    setIsDeletingPrinter(true);
    try {
      const res = await deletePrinter(deletePrinterTarget.id);
      if (!res.ok) {
        throw new Error(res.error?.message || "Delete failed");
      }

      setPrinters((prev) => prev.filter((p) => p.id !== deletePrinterTarget.id));
      setSelectedPrinter((prev) =>
        prev && prev.id === deletePrinterTarget.id ? null : prev
      );
      setEditPrinterModal((prev) =>
        prev && prev.id === deletePrinterTarget.id ? null : prev
      );

      addToast({
        type: "success",
        title: "Printer removed",
        message: `"${deletePrinterTarget.name}" has been deleted.`,
      });
      setDeletePrinterTarget(null);
    } catch (error: any) {
      addToast({
        type: "error",
        title: "Remove failed",
        message: error?.message || "Unable to delete printer.",
      });
    } finally {
      setIsDeletingPrinter(false);
    }
  };

  const cancelRemovePrinter = () => {
    if (isDeletingPrinter) return;
    setDeletePrinterTarget(null);
  };

  const handleRemoveUser = (userId: string, userName: string) => {
    if (
      window.confirm(
        `Are you sure you want to remove user "${userName}"? This action cannot be undone.`
      )
    ) {
      // In real app, this would delete via API
      addToast({
        type: "success",
        title: "User Removed",
        message: `User "${userName}" has been removed successfully.`,
      });
      setSelectedUser(null);
    }
  };

  const renderUsersTab = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {users.map((user) => (
          <GlassCard key={user.id} className="p-6">
            <div className="flex items-start gap-4">
              <img
                src={toMediaUrl(user.profilePicture)}
                alt={user.username}
                className="w-16 h-16 rounded-full object-cover"
              />

              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="font-semibold text-theme-text">
                    {user.firstName} {user.lastName}
                  </h3>
                  <div className="flex gap-1">
                    {user.roles.map((role) => (
                      <span
                        key={role}
                        className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-campus-green-light text-campus-green"
                      >
                        {role}
                      </span>
                    ))}
                  </div>
                </div>
                <p className="text-sm text-theme-text-secondary mb-1">
                  @{user.username}
                </p>
                <p className="text-sm text-theme-text-secondary mb-1">
                  {user.email}
                </p>
                <p className="text-sm text-theme-text-secondary mb-3">
                  {user.university} - {user.hall}
                </p>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-campus-green">
                    Credits: ৳{Number(user?.credits ?? 0).toFixed(2)}
                  </span>
                  <GlassButton
                    variant="secondary"
                    size="sm"
                    onClick={() => setSelectedUser(user)}
                  >
                    <Eye size={16} className="mr-1" />
                    View Details
                  </GlassButton>
                </div>
              </div>
            </div>
          </GlassCard>
        ))}
      </div>
    </div>
  );

  const renderPrintersTab = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {printers.map((printer) => (
          <GlassCard key={printer.id} className="p-6">
            <div className="flex items-start gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-campus-green/20 to-info/20 rounded-lg flex items-center justify-center">
                <Printer size={24} className="text-campus-green" />
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="font-semibold text-theme-text">
                    {printer.name}
                  </h3>
                  <span
                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      printer.isApproved
                        ? "bg-success/10 text-success"
                        : "bg-warning/10 text-warning"
                    }`}
                  >
                    {printer.isApproved ? "Approved" : "Pending"}
                  </span>
                </div>
                <p className="text-sm text-theme-text-secondary mb-1">
                  {printer.specifications.brand} {printer.specifications.model}
                </p>
                <p className="text-sm text-theme-text-secondary mb-1">
                  Owner: {printer.ownerName}
                </p>
                <p className="text-sm text-theme-text-secondary mb-3">
                  {printer.location.hall} - {printer.location.room}
                </p>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="text-sm text-theme-text-secondary">
                <span className="font-medium">
                  B&W: ৳{printer.pricePerPageBW}
                </span>
                {printer.pricePerPageColor > 0 && (
                  <span className="ml-3 font-medium">
                    Color: ৳{printer.pricePerPageColor}
                  </span>
                )}
              </div>
              <div className="flex flex-wrap gap-2 justify-end">
                <GlassButton
                  variant="secondary"
                  size="sm"
                  onClick={() => setSelectedPrinter(printer)}
                >
                  <Eye size={16} className="mr-1" />
                  View
                </GlassButton>
                <GlassButton
                  variant="secondary"
                  size="sm"
                  onClick={() => openEditPrinter(printer)}
                >
                  <Edit size={16} className="mr-1" />
                  Edit
                </GlassButton>
                <GlassButton
                  variant="danger"
                  size="sm"
                  onClick={() => requestRemovePrinter(printer)}
                >
                  <Trash2 size={16} className="mr-1" />
                  Remove
                </GlassButton>
                {!printer.isApproved && (
                  <>
                    <GlassButton
                      variant="danger"
                      size="sm"
                      onClick={() => handleRejectPrinter(printer.id)}
                    >
                      <XCircle size={16} className="mr-1" />
                      Reject
                    </GlassButton>
                    <GlassButton
                      variant="success"
                      size="sm"
                      onClick={() => handleApprovePrinter(printer.id)}
                    >
                      <CheckCircle size={16} className="mr-1" />
                      Approve
                    </GlassButton>
                  </>
                )}
              </div>
            </div>
          </GlassCard>
        ))}
      </div>
    </div>
  );

  const renderAnalyticsTab = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <GlassCard className="p-6 text-center">
          <Users size={32} className="mx-auto text-info mb-4" />
          <h3 className="text-2xl font-bold text-theme-text">1,234</h3>
          <p className="text-theme-text-secondary">Total Users</p>
        </GlassCard>
        <GlassCard className="p-6 text-center">
          <Printer size={32} className="mx-auto text-success mb-4" />
          <h3 className="text-2xl font-bold text-theme-text">45</h3>
          <p className="text-theme-text-secondary">Active Printers</p>
        </GlassCard>
        <GlassCard className="p-6 text-center">
          <BarChart3 size={32} className="mx-auto text-campus-green mb-4" />
          <h3 className="text-2xl font-bold text-theme-text">৳12,450</h3>
          <p className="text-theme-text-secondary">Monthly Revenue</p>
        </GlassCard>
      </div>

      <GlassCard className="p-6">
        <h3 className="text-lg font-semibold text-theme-text mb-4">
          Recent Activity
        </h3>
        <div className="space-y-3">
          {[
            {
              action: "New user registered",
              time: "5 minutes ago",
              type: "user",
            },
            { action: "Printer approved", time: "1 hour ago", type: "printer" },
            { action: "Print job completed", time: "2 hours ago", type: "job" },
            {
              action: "Delivery request fulfilled",
              time: "3 hours ago",
              type: "delivery",
            },
          ].map((activity, index) => (
            <div
              key={index}
              className="flex items-center justify-between py-2 border-b border-glass-border last:border-b-0"
            >
              <span className="text-sm text-theme-text">{activity.action}</span>
              <span className="text-xs text-theme-text-secondary">
                {activity.time}
              </span>
            </div>
          ))}
        </div>
      </GlassCard>
    </div>
  );

  return (
    <div className="min-h-screen pt-16 px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold gradient-text mb-2">
            Admin Dashboard
          </h1>
          <p className="text-theme-text-secondary">
            Manage users, printers, and platform analytics
          </p>
        </div>

        {/* Navigation Tabs */}
        <GlassCard className="p-2">
          <div className="flex space-x-1">
            {[
              { id: "users", label: "Users", icon: Users },
              { id: "printers", label: "Printers", icon: Printer },
              { id: "analytics", label: "Analytics", icon: BarChart3 },
            ].map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => {
                    setActiveTab(tab.id as any);
                    window.location.hash = tab.id;
                  }}
                  className={`flex items-center px-4 py-2 rounded-component text-sm font-medium transition-colors ${
                    activeTab === tab.id
                      ? "bg-campus-green text-white"
                      : "text-theme-text-secondary hover:text-theme-text hover:bg-glass-hover"
                  }`}
                >
                  <Icon size={16} className="mr-2" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </GlassCard>

        {/* Tab Content */}
        {activeTab === "users" && renderUsersTab()}
        {activeTab === "printers" && renderPrintersTab()}
        {activeTab === "analytics" && renderAnalyticsTab()}

        {/* User Detail Modal */}
        {selectedUser && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-lg">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">User Details</h3>
                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <img
                      src={toMediaUrl(selectedUser.profilePicture)}
                      alt={selectedUser.username}
                      className="w-20 h-20 rounded-full object-cover"
                    />

                    <div>
                      <h4 className="font-semibold text-theme-text">
                        {selectedUser.firstName} {selectedUser.lastName}
                      </h4>
                      <p className="text-theme-text-secondary">
                        @{selectedUser.username}
                      </p>
                      <p className="text-theme-text-secondary">
                        {selectedUser.email}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-theme-text-secondary">University</p>
                      <p className="text-theme-text font-medium">
                        {selectedUser.university}
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">Hall</p>
                      <p className="text-theme-text font-medium">
                        {selectedUser.hall}
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">Credits</p>
                      <p className="text-theme-text font-medium">
                        ৳{Number(selectedUser?.credits ?? 0).toFixed(2)}
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">Roles</p>
                      <div className="flex gap-1 mt-1">
                        {selectedUser.roles.map((role) => (
                          <span
                            key={role}
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-campus-green-light text-campus-green"
                          >
                            {role}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="flex gap-3 pt-4">
                    <GlassButton
                      variant="secondary"
                      onClick={() => setSelectedUser(null)}
                      className="flex-1"
                    >
                      Close
                    </GlassButton>
                    <GlassButton
                      variant="danger"
                      onClick={() =>
                        handleRemoveUser(
                          selectedUser.id,
                          `${selectedUser.firstName} ${selectedUser.lastName}`
                        )
                      }
                      className="flex-1"
                    >
                      <Trash2 size={16} className="mr-1" />
                      Remove User
                    </GlassButton>
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        {/* Printer Detail Modal */}
        {selectedPrinter && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-lg">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Printer Details</h3>
                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-campus-green/20 to-info/20 rounded-lg flex items-center justify-center">
                      <Printer size={24} className="text-campus-green" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-theme-text">
                        {selectedPrinter.name}
                      </h4>
                      <p className="text-theme-text-secondary">
                        {selectedPrinter.specifications.brand}{" "}
                        {selectedPrinter.specifications.model}
                      </p>
                      <p className="text-theme-text-secondary">
                        Owner: {selectedPrinter.ownerName}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-theme-text-secondary">Location</p>
                      <p className="text-theme-text font-medium">
                        {selectedPrinter.location.hall} -{" "}
                        {selectedPrinter.location.room}
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">Type</p>
                      <p className="text-theme-text font-medium">
                        {selectedPrinter.type}
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">B&W Price</p>
                      <p className="text-theme-text font-medium">
                        ৳{selectedPrinter.pricePerPageBW}/page
                      </p>
                    </div>
                    <div>
                      <p className="text-theme-text-secondary">Color Price</p>
                      <p className="text-theme-text font-medium">
                        {selectedPrinter.pricePerPageColor > 0
                          ? `৳${selectedPrinter.pricePerPageColor}/page`
                          : "N/A"}
                      </p>
                    </div>
                  </div>

                  <div>
                    <p className="text-theme-text-secondary text-sm">
                      Features
                    </p>
                    <p className="text-theme-text font-medium">
                      {selectedPrinter.specifications.features.join(", ")}
                    </p>
                  </div>

                  <div className="flex gap-3 pt-4">
                <GlassButton
                  variant="secondary"
                  onClick={() => setSelectedPrinter(null)}
                  className="flex-1"
                >
                  Close
                </GlassButton>
                <GlassButton
                  variant="secondary"
                  onClick={() => {
                    openEditPrinter(selectedPrinter);
                    setSelectedPrinter(null);
                  }}
                  className="flex-1"
                >
                  <Edit size={16} className="mr-1" />
                  Edit
                </GlassButton>
                <GlassButton
                  variant="danger"
                  onClick={() => requestRemovePrinter(selectedPrinter)}
                  className="flex-1"
                >
                      <Trash2 size={16} className="mr-1" />
                      Remove Printer
                    </GlassButton>
                    {!selectedPrinter.isApproved && (
                      <GlassButton
                        variant="success"
                        onClick={() => {
                          handleApprovePrinter(selectedPrinter.id);
                          setSelectedPrinter(null);
                        }}
                        className="flex-1"
                      >
                        <CheckCircle size={16} className="mr-1" />
                        Approve
                      </GlassButton>
                    )}
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        {editPrinterModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6 space-y-6">
                <h3 className="text-xl font-semibold text-theme-text">
                  Edit Printer: {editPrinterModal.name}
                </h3>

                <div className="space-y-4">
                  <GlassInput
                    label="Printer Name"
                    name="name"
                    value={editPrinterForm.name}
                    onChange={handleEditPrinterInput}
                    required
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-theme-text mb-2">
                        Printer Type
                      </label>
                      <select
                        name="type"
                        value={editPrinterForm.type}
                        onChange={handleEditPrinterInput}
                        className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                      >
                        <option value="color">Color Only</option>
                        <option value="bw">Black &amp; White Only</option>
                        <option value="both">Both Color &amp; B&amp;W</option>
                      </select>
                    </div>
                    <GlassInput
                      label="B&amp;W Price per Page (৳)"
                      name="pricePerPageBW"
                      type="number"
                      step="0.01"
                      value={editPrinterForm.pricePerPageBW}
                      onChange={handleEditPrinterInput}
                      required
                    />
                  </div>

                  {editPrinterForm.type !== "bw" && (
                    <GlassInput
                      label="Color Price per Page (৳)"
                      name="pricePerPageColor"
                      type="number"
                      step="0.01"
                      value={editPrinterForm.pricePerPageColor}
                      onChange={handleEditPrinterInput}
                      required
                    />
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <GlassInput
                      label="Brand"
                      name="brand"
                      value={editPrinterForm.brand}
                      onChange={handleEditPrinterInput}
                      required
                    />
                    <GlassInput
                      label="Model"
                      name="model"
                      value={editPrinterForm.model}
                      onChange={handleEditPrinterInput}
                      required
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <GlassInput
                      label="University"
                      name="university"
                      value={editPrinterForm.university}
                      onChange={handleEditPrinterInput}
                    />
                    <GlassInput
                      label="Hall"
                      name="hall"
                      value={editPrinterForm.hall}
                      onChange={handleEditPrinterInput}
                      required
                    />
                    <GlassInput
                      label="Room"
                      name="room"
                      value={editPrinterForm.room}
                      onChange={handleEditPrinterInput}
                    />
                  </div>

                  <GlassInput
                    label="Paper Sizes (comma separated)"
                    name="paperSizes"
                    value={editPrinterForm.paperSizes}
                    onChange={handleEditPrinterInput}
                    helperText="e.g., A4, Letter, Legal"
                  />

                  <GlassInput
                    label="Features (comma separated)"
                    name="features"
                    value={editPrinterForm.features}
                    onChange={handleEditPrinterInput}
                    helperText="e.g., Duplex, Stapling, Hole Punch"
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-theme-text mb-2">
                        Status
                      </label>
                      <select
                        name="status"
                        value={editPrinterForm.status}
                        onChange={handleEditPrinterInput}
                        className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                      >
                        {statusOptions.map((status) => (
                          <option key={status} value={status}>
                            {status.charAt(0).toUpperCase() + status.slice(1)}
                          </option>
                        ))}
                      </select>
                    </div>
                    <label className="flex items-center gap-2 text-sm text-theme-text">
                      <input
                        type="checkbox"
                        name="isApproved"
                        checked={editPrinterForm.isApproved}
                        onChange={handleEditPrinterInput}
                        className="h-4 w-4 rounded border-glass-border text-campus-green focus:ring-campus-green"
                      />
                      Mark as approved
                    </label>
                  </div>
                </div>

                <div className="flex gap-3 pt-4">
                  <GlassButton
                    variant="secondary"
                    onClick={() => setEditPrinterModal(null)}
                    className="flex-1"
                    disabled={isSavingPrinter}
                  >
                    Cancel
                  </GlassButton>
                  <GlassButton
                    variant="primary"
                    onClick={handleSavePrinter}
                    loading={isSavingPrinter}
                    className="flex-1"
                  >
                    Save Changes
                  </GlassButton>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        <ConfirmDialog
          open={!!deletePrinterTarget}
          title="Remove printer?"
          message={
            <span>
              This will permanently remove{' '}
              <span className="font-semibold text-theme-text">
                {deletePrinterTarget?.name}
              </span>{' '}
              from the platform. Jobs associated with it will no longer be available.
            </span>
          }
          confirmLabel="Remove"
          confirmVariant="danger"
          loading={isDeletingPrinter}
          onConfirm={confirmRemovePrinter}
          onCancel={cancelRemovePrinter}
        />
      </div>
    </div>
  );
};

FILE: src/pages/ComingSoonPage.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, CreditCard, Sparkles, Clock } from 'lucide-react';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';

export const ComingSoonPage: React.FC = () => {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen pt-16 px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-2xl mx-auto">
        <div className="text-center space-y-8 flex items-center justify-center min-h-[calc(100vh-200px)] flex-col">
        {/* Animated Icon */}
        <div className="relative">
          <div className="w-32 h-32 mx-auto bg-gradient-to-r from-campus-green to-info rounded-full flex items-center justify-center animate-pulse">
            <CreditCard size={48} className="text-white" />
          </div>
          <div className="absolute -top-2 -right-2">
            <Sparkles size={24} className="text-yellow-400 animate-bounce" />
          </div>
        </div>

        {/* Main Content */}
        <div className="space-y-6">
          <h1 className="text-4xl md:text-5xl font-bold gradient-text">
            Coming Soon
          </h1>
          <p className="text-xl text-theme-text-secondary max-w-lg mx-auto">
            We're working hard to bring you a seamless credit top-up experience. 
            Stay tuned for exciting payment options!
          </p>
        </div>

        {/* Features Preview */}
        <GlassCard className="p-8 text-left">
          <h3 className="text-xl font-semibold text-theme-text mb-6 text-center">
            What's Coming
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="flex items-start space-x-3">
              <div className="w-8 h-8 bg-campus-green/20 rounded-full flex items-center justify-center flex-shrink-0">
                <CreditCard size={16} className="text-campus-green" />
              </div>
              <div>
                <h4 className="font-medium text-theme-text">Multiple Payment Methods</h4>
                <p className="text-sm text-theme-text-secondary">Credit cards, PayPal, and campus cards</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="w-8 h-8 bg-info/20 rounded-full flex items-center justify-center flex-shrink-0">
                <Sparkles size={16} className="text-info" />
              </div>
              <div>
                <h4 className="font-medium text-theme-text">Instant Top-ups</h4>
                <p className="text-sm text-theme-text-secondary">Credits added to your account immediately</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="w-8 h-8 bg-success/20 rounded-full flex items-center justify-center flex-shrink-0">
                <Clock size={16} className="text-success" />
              </div>
              <div>
                <h4 className="font-medium text-theme-text">Auto-Reload</h4>
                <p className="text-sm text-theme-text-secondary">Set up automatic credit refills</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="w-8 h-8 bg-warning/20 rounded-full flex items-center justify-center flex-shrink-0">
                <CreditCard size={16} className="text-warning" />
              </div>
              <div>
                <h4 className="font-medium text-theme-text">Bulk Discounts</h4>
                <p className="text-sm text-theme-text-secondary">Save more when you add larger amounts</p>
              </div>
            </div>
          </div>
        </GlassCard>

        {/* Call to Action */}
        <div className="space-y-4">
          <p className="text-theme-text-secondary">
            Want to be notified when this feature launches?
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <GlassButton
              variant="secondary"
              onClick={() => navigate(-1)}
              className="flex items-center justify-center"
            >
              <ArrowLeft size={16} className="mr-2" />
              Go Back
            </GlassButton>
            <GlassButton
              variant="primary"
              onClick={() => navigate('/dashboard')}
              glow
            >
              Return to Dashboard
            </GlassButton>
          </div>
        </div>

        {/* Progress Indicator */}
        <div className="pt-8">
          <div className="flex items-center justify-center space-x-2 text-theme-text-secondary">
            <Clock size={16} />
            <span className="text-sm">Expected launch: Q2 2024</span>
          </div>
        </div>
        </div>
      </div>
    </div>
  );
};
FILE: src/pages/DashboardPage.tsx
import React, {useState, useEffect} from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useToast } from '../context/ToastContext';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import { GlassInput } from '../components/ui/GlassInput';
import ConfirmDialog from '../components/ui/ConfirmDialog';
import { 
  Coins, 
  FileText, 
  Printer, 
  Truck, 
  Plus, 
  Settings,
  BarChart3,
  Users,
  Clock,
  MapPin,
  Star,
  Edit,
  Trash2,
} from 'lucide-react';
import activitiesData from '../data/activities.json';
import { listPrinters, updatePrinter, deletePrinter, createPrinter, PrinterUpdatePayload } from '../lib/api';
import { Printer as PrinterType } from '../types';


export const DashboardPage: React.FC = () => {
  const { user, currentRole, addRole } = useAuth();
  const { addToast } = useToast();
  const navigate = useNavigate();
  const [showPrinterApplication, setShowPrinterApplication] = useState(false);
  const [showMyPrinters, setShowMyPrinters] = useState(false);
  const [showEditPrinter, setShowEditPrinter] = useState(false);
  const [selectedPrinter, setSelectedPrinter] = useState<PrinterType | null>(null);
  const [printerFormData, setPrinterFormData] = useState({
    name: '',
    type: 'both',
    pricePerPageBW: '',
    pricePerPageColor: '',
    status: 'online', // Add status to form state
    brand: '',
    model: '',
    paperSizes: 'A4,Letter',
    features: '',
    university: '',
    hall: '',
    room: '',
  });

  // Load my printers from backend, including pending; hide declined/rejected
  const [myPrinters, setMyPrinters] = useState<PrinterType[]>([]);
  const [deleteTarget, setDeleteTarget] = useState<PrinterType | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  const loadMyPrinters = async () => {
    if (!user?.id) return;
    let canceled = false;
    try {
      const res = await listPrinters(user.id);
      if (canceled) return;
      const fromApi: PrinterType[] = Array.isArray(res.data) ? (res.data as PrinterType[]) : [];
      setMyPrinters(fromApi);
    } catch (error) {
      addToast({ type: 'error', title: 'Failed to load printers', message: 'Please try again later.' });
    }
    return () => {
      canceled = true;
    };
  };

  useEffect(() => {
    loadMyPrinters();
  }, [user?.id]);

  // When the current user profile updates elsewhere (e.g., avatar), keep our cards fresh
  useEffect(() => {
    function onUserUpdated() {
      // no-op for now, but keeps pattern consistent with AdminPage
    }
    window.addEventListener('auth:user-updated', onUserUpdated as EventListener);
    return () => window.removeEventListener('auth:user-updated', onUserUpdated as EventListener);
  }, []);



  const handlePrinterApplication = async () => {
    try {
      const paperSizesArr = String(printerFormData.paperSizes || '')
        .split(',').map(s => s.trim()).filter(Boolean);
      const featuresArr = String(printerFormData.features || '')
        .split(',').map(s => s.trim()).filter(Boolean);

      const payload = {
        name: printerFormData.name,
        type: printerFormData.type as 'color' | 'bw' | 'both',
        pricePerPageBW: Number(printerFormData.pricePerPageBW || 0),
        pricePerPageColor: Number(printerFormData.pricePerPageColor || 0),
        // status is set by backend to PENDING_APPROVAL
        location: {
          university: printerFormData.university || user?.university || 'Default University', // Add fallback
          hall: printerFormData.hall || '',
          room: printerFormData.room || '',
        },
        specifications: {
          brand: printerFormData.brand || '',
          model: printerFormData.model || '',
          paperSizes: paperSizesArr,
          features: featuresArr,
        },
      };

      const res = await createPrinter(payload);
      if (!res.ok || !res.data) {
        throw new Error(res.error?.message || 'Application failed');
      }

      // In real app, this would submit to API
      if (!user?.roles.includes('printer_owner')) {
        addRole('printer_owner');
      }
      setShowPrinterApplication(false);
      addToast({
        type: 'success',
        title: 'Printer Application Submitted',
        message: 'Admin will review and approve your printer.'
      });
      loadMyPrinters(); // Refresh the list
    } catch (e: any) {
      addToast({ type: 'error', title: 'Application failed', message: e?.message || 'Please try again.' });
    }
  };

  const handleEditPrinter = (printer: PrinterType) => {
    setSelectedPrinter(printer);
    setPrinterFormData({
      name: printer.name,
      type: printer.type,
      pricePerPageBW: printer.pricePerPageBW.toString(),
      pricePerPageColor: printer.pricePerPageColor.toString(),
      status: printer.status, // Set status in form
      brand: printer.specifications.brand,
      model: printer.specifications.model,
      paperSizes: printer.specifications.paperSizes.join(','),
      features: printer.specifications.features.join(','),
      university: printer.location.university,
      hall: printer.location.hall,
      room: printer.location.room || '',
    });
    setShowEditPrinter(true);
  };

const handleUpdatePrinter = async () => {
  if (!selectedPrinter) return;
  try {
    const paperSizesArr = String(printerFormData.paperSizes || '')
      .split(',').map(s => s.trim()).filter(Boolean);
    const featuresArr = String(printerFormData.features || '')
      .split(',').map(s => s.trim()).filter(Boolean);

    const payload: PrinterUpdatePayload = {
      name: printerFormData.name,
      type: printerFormData.type as 'color' | 'bw' | 'both',
      pricePerPageBW: Number(printerFormData.pricePerPageBW || 0),
      pricePerPageColor: Number(printerFormData.pricePerPageColor || 0),
      status: printerFormData.status as 'online' | 'offline' | 'maintenance' | 'pending' | 'declined', // Include status in payload
      location: {
        university: printerFormData.university || '',
        hall: printerFormData.hall || '',
        room: printerFormData.room || '',
      },
      specifications: {
        brand: printerFormData.brand || '',
        model: printerFormData.model || '',
        paperSizes: paperSizesArr,
        features: featuresArr,
      },
    };

    const res = await updatePrinter(String(selectedPrinter.id), payload);
    if (!res.ok || !res.data) {
      throw new Error(res.error?.message || 'Update failed');
    }

    const updated = res.data as PrinterType;
    setMyPrinters(prev => prev.map(p => (p.id === updated.id ? updated : p)));

    addToast({ type: 'success', title: 'Printer updated' });
    setShowEditPrinter(false);
    setSelectedPrinter(null);
  } catch (e: any) {
    addToast({ type: 'error', title: 'Update failed', message: e?.message || 'Please try again.' });
  }
};


  const requestRemovePrinter = (printer: PrinterType) => {
    setDeleteTarget(printer);
  };

  const confirmRemovePrinter = async () => {
    if (!deleteTarget) return;
    setIsDeleting(true);
    try {
      const targetId = String(deleteTarget.id);
      const res = await deletePrinter(targetId);
      if (!res.ok) {
        throw new Error(res.error?.message || 'Delete failed');
      }

      setMyPrinters(prev => prev.filter(p => p.id !== targetId));
      setSelectedPrinter(prev => (prev && prev.id === targetId ? null : prev));
      if (selectedPrinter?.id === targetId) {
        setShowEditPrinter(false);
      }
      addToast({
        type: 'success',
        title: 'Printer removed',
        message: `"${deleteTarget.name}" has been deleted.`
      });
      setDeleteTarget(null);
    } catch (e: any) {
      addToast({
        type: 'error',
        title: 'Remove failed',
        message: e?.message || 'Please try again.'
      });
    } finally {
      setIsDeleting(false);
    }
  };

  const cancelRemovePrinter = () => {
    if (isDeleting) return;
    setDeleteTarget(null);
  };

  const getDashboardStats = () => {
    switch (currentRole) {
      case 'user':
        return [
          { label: 'Print Credits', value: `৳${user?.credits.toFixed(2)}`, icon: Coins, color: 'text-success' },
          { label: 'Documents Printed', value: '24', icon: FileText, color: 'text-info' },
          { label: 'Active Orders', value: '2', icon: Clock, color: 'text-warning' },
        ];
      case 'printer_owner':
        return [
          { label: 'Monthly Revenue', value: '৳342.50', icon: Coins, color: 'text-success' },
          { label: 'Print Jobs', value: '89', icon: FileText, color: 'text-info' },
          { label: 'Active Printers', value: '3', icon: Printer, color: 'text-campus-green' },
        ];
      case 'admin':
        return [
          { label: 'Total Users', value: '1,234', icon: Users, color: 'text-info' },
          { label: 'Active Printers', value: '45', icon: Printer, color: 'text-success' },
          { label: 'Monthly Revenue', value: '৳12,450', icon: Coins, color: 'text-success' },
        ];
      default:
        return [];
    }
  };

  const getRecentActivity = () => {
    return activitiesData.activities[currentRole] || [];
  };

  const stats = getDashboardStats();
  const recentActivity = getRecentActivity();

  return (
    <div className="min-h-screen pt-16 px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold gradient-text mb-2">
            {currentRole === 'user' ? 'User Dashboard' : 
             currentRole === 'printer_owner' ? 'Printer Owner Dashboard' : 
             'Admin Dashboard'}
          </h1>
          <p className="text-theme-text-secondary">Welcome, {user?.firstName} {user?.lastName}!</p>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {stats.map((stat, index) => {
            const Icon = stat.icon;
            return (
              <GlassCard key={index} className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-theme-text-secondary">{stat.label}</p>
                    <p className="text-2xl font-bold text-theme-text">{stat.value}</p>
                  </div>
                  <Icon size={24} className={stat.color} />
                </div>
              </GlassCard>
            );
          })}
        </div>

        {/* Role-specific content */}
        {currentRole === 'user' && !user?.roles.includes('printer_owner') && (
          <GlassCard className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold mb-2">Become a Printer Owner</h3>
                <p className="text-theme-text-secondary">
                  Register your printer and start earning money from print jobs
                </p>
              </div>
              <GlassButton
                variant="primary"
                onClick={() => setShowPrinterApplication(true)}
              >
                Apply Now
              </GlassButton>
            </div>
          </GlassCard>
        )}

        {/* Recent Activity */}
        <GlassCard>
          <div className="p-6">
            <h2 className="text-lg font-semibold text-theme-text mb-4">Recent Activity</h2>
            <div className="space-y-3">
              {recentActivity.map((activity) => (
                <div key={activity.id} className="flex items-center justify-between py-3 border-b border-glass-border last:border-b-0">
                  <div>
                    <p className="text-sm font-medium text-theme-text">{activity.action}</p>
                    <p className="text-xs text-theme-text-secondary">{activity.time}</p>
                  </div>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    activity.status === 'completed' 
                      ? 'bg-success/10 text-success' 
                      : 'bg-warning/10 text-warning'
                  }`}>
                    {activity.status}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </GlassCard>

        {/* Quick Actions */}
        <GlassCard>
          <div className="p-6">
            <h2 className="text-lg font-semibold text-theme-text mb-4">Quick Actions</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {currentRole === 'user' && (
                <>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/printers')}
                  >
                    <FileText size={24} className="mb-2" />
                    <span className="font-medium">Request Print</span>
                    <span className="text-xs text-theme-text-secondary">Upload files to print</span>
                  </GlassButton>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/coming-soon')}
                  >
                    <Coins size={24} className="mb-2" />
                    <span className="font-medium">Add Credits</span>
                    <span className="text-xs text-theme-text-secondary">Top up your account</span>
                  </GlassButton>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/delivery')}
                  >
                    <Truck size={24} className="mb-2" />
                    <span className="font-medium">Request Delivery</span>
                    <span className="text-xs text-theme-text-secondary">Get items delivered</span>
                  </GlassButton>
                </>
              )}
              {currentRole === 'printer_owner' && (
                <>
                  <GlassButton
                    variant="secondary"
                    className="p-4 h-auto flex-col"
                    onClick={() => setShowPrinterApplication(true)}
                  >
                    <Plus size={24} className="mb-2" />
                    <span className="font-medium">Add Printer</span>
                    <span className="text-xs text-theme-text-secondary">Register new printer</span>
                  </GlassButton>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => setShowMyPrinters(true)}
                  >
                    <Settings size={24} className="mb-2" />
                    <span className="font-medium">Manage Printers</span>
                    <span className="text-xs text-theme-text-secondary">Update printer settings</span>
                  </GlassButton>
                </>
              )}
              {currentRole === 'admin' && (
                <>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/admin#users')}
                  >
                    <Users size={24} className="mb-2" />
                    <span className="font-medium">User Management</span>
                    <span className="text-xs text-theme-text-secondary">Manage users</span>
                  </GlassButton>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/admin#printers')}
                  >
                    <Printer size={24} className="mb-2" />
                    <span className="font-medium">Printer Management</span>
                    <span className="text-xs text-theme-text-secondary">Manage printers</span>
                  </GlassButton>
                  <GlassButton 
                    variant="secondary" 
                    className="p-4 h-auto flex-col"
                    onClick={() => navigate('/admin#analytics')}
                  >
                    <BarChart3 size={24} className="mb-2" />
                    <span className="font-medium">Analytics</span>
                    <span className="text-xs text-theme-text-secondary">View platform stats</span>
                  </GlassButton>
                </>
              )}
            </div>
          </div>
        </GlassCard>

        {/* Printer Application Modal */}
        {showPrinterApplication && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Apply as Printer Owner</h3>
                <div className="space-y-4">
                  <GlassInput
                    label="Printer Name"
                    value={printerFormData.name}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, name: e.target.value }))}
                  />
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-dark-text mb-2">Printer Type</label>
                      <select
                        value={printerFormData.type}
                        onChange={(e) => setPrinterFormData(prev => ({ ...prev, type: e.target.value }))}
                        className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                      >
                        <option value="color">Color Only</option>
                        <option value="bw">Black & White Only</option>
                        <option value="both">Both Color & B&W</option>
                      </select>
                    </div>
                    <GlassInput
                      label="B&W Price per Page (৳)"
                      type="number"
                      step="0.01"
                      value={printerFormData.pricePerPageBW}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, pricePerPageBW: e.target.value }))}
                    />
                  </div>

                  {printerFormData.type !== 'bw' && (
                    <GlassInput
                      label="Color Price per Page (৳)"
                      type="number"
                      step="0.01"
                      value={printerFormData.pricePerPageColor}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, pricePerPageColor: e.target.value }))}
                    />
                  )}

                  <div className="grid grid-cols-2 gap-4">
                    <GlassInput
                      label="Brand"
                      value={printerFormData.brand}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, brand: e.target.value }))}
                    />
                    <GlassInput
                      label="Model"
                      value={printerFormData.model}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, model: e.target.value }))}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <GlassInput
                      label="Hall"
                      value={printerFormData.hall}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, hall: e.target.value }))}
                    />
                    <GlassInput
                      label="Room (Optional)"
                      value={printerFormData.room}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, room: e.target.value }))}
                    />
                  </div>

                  <GlassInput
                    label="Paper Sizes (comma separated)"
                    value={printerFormData.paperSizes}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, paperSizes: e.target.value }))}
                    helperText="e.g., A4, Letter, Legal"
                  />

                  <GlassInput
                    label="Features (comma separated)"
                    value={printerFormData.features}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, features: e.target.value }))}
                    helperText="e.g., Duplex, Stapling, Hole Punch"
                  />

                  <div className="flex gap-4 pt-4">
                    <GlassButton
                      variant="secondary"
                      onClick={() => setShowPrinterApplication(false)}
                      className="flex-1"
                    >
                      Cancel
                    </GlassButton>
                    <GlassButton
                      variant="primary"
                      onClick={handlePrinterApplication}
                      className="flex-1"
                    >
                      Submit Application
                    </GlassButton>
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        {/* My Printers Modal */}
        {showMyPrinters && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-6">My Printers</h3>
                
                {myPrinters.length === 0 ? (
                  <div className="text-center py-8">
                    <Printer size={48} className="mx-auto text-theme-text-muted mb-4" />
                    <p className="text-theme-text-secondary">No printers registered yet</p>
                    <GlassButton
                      variant="primary"
                      className="mt-4"
                      onClick={() => {
                        setShowMyPrinters(false);
                        setShowPrinterApplication(true);
                      }}
                    >
                      Add Your First Printer
                    </GlassButton>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {myPrinters.map((printer) => (
                      <div key={printer.id} className="p-4 bg-glass-bg rounded-component border border-glass-border">
                        <div className="flex items-start justify-between mb-3">
                          <div>
                            <h4 className="font-semibold text-theme-text">{printer.name}</h4>
                            <p className="text-sm text-theme-text-secondary">
                              {printer.specifications.brand} {printer.specifications.model}
                            </p>
                          </div>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            printer.status === 'online' 
                              ? 'bg-success/10 text-success' 
                              : printer.status === 'pending'
                              ? 'bg-warning/10 text-warning'
                              : printer.status === 'declined'
                              ? 'bg-danger/20 text-danger'
                              : 'bg-neutral-500/20 text-neutral-400'
                          }`}>
                            {printer.status}
                          </span>
                        </div>
                        
                        <div className="space-y-2 text-sm text-theme-text-secondary mb-4">
                          <div className="flex items-center">
                            <MapPin size={14} className="mr-2" />
                            <span>{printer.location.hall} {printer.location.room}</span>
                          </div>
                          <div className="flex items-center">
                            <Coins size={14} className="mr-2" />
                            <span>B&W: ৳{printer.pricePerPageBW} | Color: ৳{printer.pricePerPageColor}</span>
                          </div>
                          <div className="flex items-center">
                            <Star size={14} className="mr-2" />
                            <span>Rating: {printer.rating} ({printer.totalJobs} jobs)</span>
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          <GlassButton
                            variant="secondary"
                            size="sm"
                            onClick={() => handleEditPrinter(printer)}
                            className="flex-1"
                          >
                            <Edit size={16} className="mr-1" />
                            Edit
                          </GlassButton>
                          <GlassButton
                            variant="danger"
                            size="sm"
                            onClick={() => requestRemovePrinter(printer)}
                            className="flex-1"
                          >
                            <Trash2 size={16} className="mr-1" />
                            Remove
                          </GlassButton>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="flex gap-3 pt-6 border-t border-glass-border">
                  <GlassButton
                    variant="secondary"
                    onClick={() => setShowMyPrinters(false)}
                    className="flex-1"
                  >
                    Close
                  </GlassButton>
                  <GlassButton
                    variant="primary"
                    onClick={() => {
                      setShowMyPrinters(false);
                      setShowPrinterApplication(true);
                    }}
                    className="flex-1"
                  >
                    <Plus size={16} className="mr-2" />
                    Add New Printer
                  </GlassButton>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        {/* Edit Printer Modal */}
        {showEditPrinter && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Edit Printer: {selectedPrinter?.name}</h3>
                <div className="space-y-4">
                  <GlassInput
                    label="Printer Name"
                    value={printerFormData.name}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, name: e.target.value }))}
                  />
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-theme-text mb-2">Printer Type</label>
                      <select
                        value={printerFormData.type}
                        onChange={(e) => setPrinterFormData(prev => ({ ...prev, type: e.target.value }))}
                        className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                      >
                        <option value="color">Color Only</option>
                        <option value="bw">Black & White Only</option>
                        <option value="both">Both Color & B&W</option>
                      </select>
                    </div>
                    <GlassInput
                      label="B&W Price per Page (৳)"
                      type="number"
                      step="0.01"
                      value={printerFormData.pricePerPageBW}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, pricePerPageBW: e.target.value }))}
                    />
                  </div>

                  {printerFormData.type !== 'bw' && (
                    <GlassInput
                      label="Color Price per Page (৳)"
                      type="number"
                      step="0.01"
                      value={printerFormData.pricePerPageColor}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, pricePerPageColor: e.target.value }))}
                    />
                  )}

                  {/* Status Dropdown - visible to owner and admin */}
                  <div>
                    <label className="block text-sm font-medium text-theme-text mb-2">Status</label>
                    <select
                      value={printerFormData.status}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, status: e.target.value }))}
                      className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                    >
                      {currentRole === 'admin' && <option value="pending">Pending Approval</option>}
                      <option value="online">Online</option>
                      <option value="offline">Offline</option>
                      <option value="maintenance">Maintenance</option>
                      {currentRole === 'admin' && <option value="declined">Declined</option>}
                    </select>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <GlassInput
                      label="Brand"
                      value={printerFormData.brand}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, brand: e.target.value }))}
                    />
                    <GlassInput
                      label="Model"
                      value={printerFormData.model}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, model: e.target.value }))}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <GlassInput
                      label="Hall"
                      value={printerFormData.hall}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, hall: e.target.value }))}
                    />
                    <GlassInput
                      label="Room (Optional)"
                      value={printerFormData.room}
                      onChange={(e) => setPrinterFormData(prev => ({ ...prev, room: e.target.value }))}
                    />
                  </div>

                  <GlassInput
                    label="Paper Sizes (comma separated)"
                    value={printerFormData.paperSizes}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, paperSizes: e.target.value }))}
                    helperText="e.g., A4, Letter, Legal"
                  />

                  <GlassInput
                    label="Features (comma separated)"
                    value={printerFormData.features}
                    onChange={(e) => setPrinterFormData(prev => ({ ...prev, features: e.target.value }))}
                    helperText="e.g., Duplex, Stapling, Hole Punch"
                  />

                  <div className="flex gap-4 pt-4">
                    <GlassButton
                      variant="secondary"
                      onClick={() => {
                        setShowEditPrinter(false);
                        setSelectedPrinter(null);
                      }}
                      className="flex-1"
                    >
                      Cancel
                    </GlassButton>
                    <GlassButton
                      variant="primary"
                      onClick={handleUpdatePrinter}
                      className="flex-1"
                    >
                      Update Printer
                    </GlassButton>
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        )}

        <ConfirmDialog
          open={!!deleteTarget}
          title="Remove printer?"
          message={
            <span>
              This will permanently delete <span className="font-semibold text-theme-text">{deleteTarget?.name}</span> and remove it from your dashboard.
              You can re-register it later if needed.
            </span>
          }
          confirmLabel="Remove"
          confirmVariant="danger"
          loading={isDeleting}
          onConfirm={confirmRemovePrinter}
          onCancel={cancelRemovePrinter}
        />
      </div>
    </div>
  );
};

FILE: src/pages/DeliveryPage.tsx
import React, { useState } from 'react';
import { Plus, MapPin, Package, Clock, User, CheckCircle, XCircle } from 'lucide-react';
import Taka from '../components/icons/Taka';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import { GlassInput } from '../components/ui/GlassInput';
import { FloatingActionButton } from '../components/ui/FloatingActionButton';
import { DeliveryRequest } from '../types';
import deliveriesData from '../data/deliveries.json';

export const DeliveryPage: React.FC = () => {
  const [filter, setFilter] = useState<'all' | 'pending' | 'accepted' | 'completed'>('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [formData, setFormData] = useState({
    items: [{ name: '', quantity: 1, description: '' }],
    pickupHall: '',
    pickupRoom: '',
    deliveryHall: '',
    deliveryRoom: '',
    payment: '',
    urgency: 'medium',
    requestedTime: '',
  });

  const deliveryRequests: DeliveryRequest[] = deliveriesData.deliveries;

  const filteredDeliveries = deliveryRequests.filter(delivery => {
    if (filter === 'all') return true;
    return delivery.status === filter;
  });

  const addItem = () => {
    setFormData(prev => ({
      ...prev,
      items: [...prev.items, { name: '', quantity: 1, description: '' }]
    }));
  };

  const removeItem = (index: number) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.filter((_, i) => i !== index)
    }));
  };

  const updateItem = (index: number, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }));
  };

  const handleSubmit = () => {
    // In real app, this would submit to API
    alert('Delivery request created successfully!');
    setShowCreateModal(false);
    setFormData({
      items: [{ name: '', quantity: 1, description: '' }],
      pickupHall: '',
      pickupRoom: '',
      deliveryHall: '',
      deliveryRoom: '',
      payment: '',
      urgency: 'medium',
      requestedTime: '',
    });
  };

  const formatTimeAgo = (dateString: string) => {
    const now = new Date();
    const date = new Date(dateString);
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 60) {
      return `${diffInMinutes} minutes ago`;
    } else if (diffInMinutes < 1440) {
      return `${Math.floor(diffInMinutes / 60)} hours ago`;
    } else {
      return `${Math.floor(diffInMinutes / 1440)} days ago`;
    }
  };

  return (
    <div className="min-h-screen pt-16 px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold gradient-text mb-2">Delivery Requests</h1>
          <p className="text-theme-text-secondary">Accept delivery requests and earn money</p>
        </div>

        {/* Filter Tabs */}
        <GlassCard className="p-2">
          <div className="flex space-x-1">
            {['all', 'pending', 'accepted', 'completed'].map((status) => (
              <button
                key={status}
                onClick={() => setFilter(status as any)}
                className={`px-4 py-2 rounded-component text-sm font-medium transition-colors ${
                  filter === status
                    ? 'bg-campus-green text-white'
                    : 'text-theme-text-secondary hover:text-theme-text hover:bg-glass-hover'
                }`}
              >
                {status.charAt(0).toUpperCase() + status.slice(1)}
              </button>
            ))}
          </div>
        </GlassCard>

        {/* Delivery Requests */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredDeliveries.map((delivery) => (
            <GlassCard key={delivery.id} className="p-6">
              <div className="flex items-start gap-4 mb-4">
                <img
                  src={delivery.userProfilePicture}
                  alt={delivery.userName}
                  className="w-12 h-12 rounded-full object-cover"
                />
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="font-semibold text-theme-text">{delivery.userName}</h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      delivery.status === 'completed' ? 'bg-success/10 text-success' :
                      delivery.status === 'accepted' ? 'bg-info/10 text-info' :
                      'bg-warning/10 text-warning'
                    }`}>
                      {delivery.status}
                    </span>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      delivery.urgency === 'high' ? 'bg-danger/10 text-danger' :
                      delivery.urgency === 'medium' ? 'bg-warning/10 text-warning' :
                      'bg-glass-bg text-theme-text-secondary'
                    }`}>
                      {delivery.urgency} priority
                    </span>
                  </div>
                  <p className="text-sm text-theme-text-secondary">
                    <Clock size={14} className="inline mr-1" />
                    {formatTimeAgo(delivery.createdAt)}
                  </p>
                </div>
              </div>
              
              <div className="space-y-3 mb-4">
                <div className="flex items-start text-sm text-theme-text-secondary">
                  <MapPin size={16} className="mr-2 mt-0.5 flex-shrink-0" />
                  <div>
                    <p><strong>Pickup:</strong> {delivery.pickupLocation.hall} {delivery.pickupLocation.room}</p>
                    <p><strong>Delivery:</strong> {delivery.deliveryLocation.hall} {delivery.deliveryLocation.room}</p>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <p className="text-sm font-medium text-theme-text">Items to deliver:</p>
                  {delivery.items.map((item, index) => (
                    <div key={index} className="flex items-center gap-3 text-sm text-theme-text-secondary">
                      {item.image ? (
                        <img
                          src={item.image}
                          alt={item.name}
                          className="w-8 h-8 rounded object-cover flex-shrink-0"
                        />
                      ) : (
                        <Package size={14} className="flex-shrink-0" />
                      )}
                      <div>
                        <span>{item.quantity}x {item.name}</span>
                        {item.description && (
                          <span className="ml-2 text-theme-text-muted">({item.description})</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center text-lg font-bold text-campus-green">
                  <Taka size={20} />
                  <span>{delivery.payment.toFixed(2)}</span>
                </div>
                
                <div className="flex gap-2">
                  {delivery.status === 'pending' && (
                    <>
                      <GlassButton
                        variant="secondary"
                        size="sm"
                        onClick={() => alert('Delivery request rejected')}
                      >
                        <XCircle size={16} className="mr-1" />
                        Reject
                      </GlassButton>
                      <GlassButton
                        variant="primary"
                        size="sm"
                        onClick={() => alert('Delivery request accepted!')}
                      >
                        <CheckCircle size={16} className="mr-1" />
                        Accept
                      </GlassButton>
                    </>
                  )}
                  {delivery.status === 'accepted' && (
                    <GlassButton
                      variant="success"
                      size="sm"
                      onClick={() => alert('Delivery marked as completed!')}
                    >
                      <CheckCircle size={16} className="mr-1" />
                      Mark Complete
                    </GlassButton>
                  )}
                </div>
              </div>
            </GlassCard>
          ))}
        </div>

        {filteredDeliveries.length === 0 && (
          <GlassCard className="p-12 text-center">
            <Package size={48} className="mx-auto text-theme-text-muted mb-4" />
            <h3 className="text-lg font-medium text-theme-text mb-2">No delivery requests found</h3>
            <p className="text-theme-text-secondary">
              {filter === 'all' 
                ? 'No delivery requests available at the moment'
                : `No ${filter} deliveries found`
              }
            </p>
          </GlassCard>
        )}

        {/* Floating Action Button */}
        <FloatingActionButton
          icon={<Plus size={24} />}
          onClick={() => setShowCreateModal(true)}
        />

        {/* Create Delivery Modal */}
        {showCreateModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <GlassCard className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-6">Create Delivery Request</h3>
                
                <div className="space-y-6">
                  {/* Items */}
                  <div>
                    <h4 className="font-medium text-theme-text mb-3">Items to Deliver</h4>
                    {formData.items.map((item, index) => (
                      <div key={index} className="grid grid-cols-12 gap-3 mb-3">
                        <div className="col-span-5">
                          <GlassInput
                            placeholder="Item name"
                            value={item.name}
                            onChange={(e) => updateItem(index, 'name', e.target.value)}
                          />
                        </div>
                        <div className="col-span-2">
                          <GlassInput
                            type="number"
                            placeholder="Qty"
                            value={item.quantity}
                            onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value))}
                            min="1"
                          />
                        </div>
                        <div className="col-span-4">
                          <GlassInput
                            placeholder="Description (optional)"
                            value={item.description}
                            onChange={(e) => updateItem(index, 'description', e.target.value)}
                          />
                        </div>
                        <div className="col-span-1">
                          {formData.items.length > 1 && (
                            <GlassButton
                              variant="danger"
                              size="sm"
                              onClick={() => removeItem(index)}
                            >
                              ×
                            </GlassButton>
                          )}
                        </div>
                      </div>
                    ))}
                    <GlassButton
                      variant="secondary"
                      size="sm"
                      onClick={addItem}
                    >
                      <Plus size={16} className="mr-1" />
                      Add Item
                    </GlassButton>
                  </div>

                  {/* Locations */}
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-theme-text mb-3">Pickup Location</h4>
                      <div className="space-y-3">
                        <GlassInput
                          label="Hall"
                          value={formData.pickupHall}
                          onChange={(e) => setFormData(prev => ({ ...prev, pickupHall: e.target.value }))}
                        />
                        <GlassInput
                          label="Room"
                          value={formData.pickupRoom}
                          onChange={(e) => setFormData(prev => ({ ...prev, pickupRoom: e.target.value }))}
                        />
                      </div>
                    </div>
                    <div>
                      <h4 className="font-medium text-theme-text mb-3">Delivery Location</h4>
                      <div className="space-y-3">
                        <GlassInput
                          label="Hall"
                          value={formData.deliveryHall}
                          onChange={(e) => setFormData(prev => ({ ...prev, deliveryHall: e.target.value }))}
                        />
                        <GlassInput
                          label="Room"
                          value={formData.deliveryRoom}
                          onChange={(e) => setFormData(prev => ({ ...prev, deliveryRoom: e.target.value }))}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Payment and Priority */}
                  <div className="grid grid-cols-2 gap-4">
                    <GlassInput
                      label="Payment Amount (৳)"
                      type="number"
                      step="0.01"
                      value={formData.payment}
                      onChange={(e) => setFormData(prev => ({ ...prev, payment: e.target.value }))}
                    />
                    <div>
                      <label className="block text-sm font-medium text-theme-text mb-2">Priority</label>
                      <select
                        value={formData.urgency}
                        onChange={(e) => setFormData(prev => ({ ...prev, urgency: e.target.value }))}
                        className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                      >
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                      </select>
                    </div>
                  </div>

                  <GlassInput
                    label="Requested Delivery Time (Optional)"
                    type="datetime-local"
                    value={formData.requestedTime}
                    onChange={(e) => setFormData(prev => ({ ...prev, requestedTime: e.target.value }))}
                  />

                  <div className="flex gap-4 pt-4">
                    <GlassButton
                      variant="secondary"
                      onClick={() => setShowCreateModal(false)}
                      className="flex-1"
                    >
                      Cancel
                    </GlassButton>
                    <GlassButton
                      variant="primary"
                      onClick={handleSubmit}
                      className="flex-1"
                    >
                      Create Request
                    </GlassButton>
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        )}
      </div>
    </div>
  );
};
FILE: src/pages/HomePage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Printer, Truck, Plus, Star, Users, Clock, Shield } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { useTheme } from '../context/ThemeContext';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import reviewsData from '../data/reviews.json';

export const HomePage: React.FC = () => {
  const { isAuthenticated } = useAuth();
  const { isDark } = useTheme();
  const navigate = useNavigate();
  // Printer form state removed – handled in dedicated registration page now.

  const handleActionClick = (path: string) => {
    if (isAuthenticated) {
      navigate(path);
    } else {
      navigate('/login', { state: { from: { pathname: path } } });
    }
  };

  const handleAddPrinter = () => {
    if (isAuthenticated) {
      navigate('/printers/add');
    } else {
      navigate('/login', { state: { from: { pathname: '/printers/add' } } });
    }
  };

  // Printer submission handled in registration page

  return (
    <div className="min-h-screen pt-16 bg-theme-bg">
      {/* Hero Section */}
      <section className="relative py-20 px-4 sm:px-6 lg:px-8 overflow-hidden">
        <div className={`absolute inset-0 bg-gradient-to-br from-campus-green/10 to-info/10 rounded-full blur-3xl transform -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 w-full h-full ${isDark ? 'opacity-100' : 'opacity-50'}`}></div>
        
        <div className="max-w-4xl mx-auto text-center relative">
          <h1 className="text-4xl md:text-6xl font-bold mb-6 animate-fade-in">
            <span className="gradient-text">Campus Printing</span>
            <br />
            <span className="text-theme-text">Made Simple</span>
          </h1>
          
          <p className="text-xl text-theme-text-secondary mb-12 max-w-2xl mx-auto animate-slide-up">
            Connect with printers across campus, get documents delivered, and earn money by sharing your printer or offering delivery services.
          </p>

          {/* Action Buttons */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-3xl mx-auto animate-slide-up">
            <GlassCard hover className="p-6 cursor-pointer" onClick={handleAddPrinter}>
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-campus-green to-info rounded-full flex items-center justify-center mx-auto mb-4">
                  <Plus size={24} className="text-white" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Add Printer</h3>
                <p className="text-sm text-theme-text-secondary">Register your printer and start earning</p>
              </div>
            </GlassCard>

            <GlassCard hover className="p-6 cursor-pointer" onClick={() => handleActionClick('/printers')}>
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-info to-campus-green rounded-full flex items-center justify-center mx-auto mb-4">
                  <Printer size={24} className="text-white" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Request Print</h3>
                <p className="text-sm text-theme-text-secondary">Find nearby printers and print documents</p>
              </div>
            </GlassCard>

            <GlassCard hover className="p-6 cursor-pointer" onClick={() => handleActionClick('/delivery')}>
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-r from-campus-green to-info rounded-full flex items-center justify-center mx-auto mb-4">
                  <Truck size={24} className="text-white" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Request Delivery</h3>
                <p className="text-sm text-theme-text-secondary">Get your items delivered across campus</p>
              </div>
            </GlassCard>
          </div>
        </div>
      </section>

      {/* About Us Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4 gradient-text">About CampusPrint</h2>
            <p className="text-xl text-theme-text-secondary max-w-3xl mx-auto">
              We're revolutionizing campus services by connecting students, printer owners, and delivery providers in one seamless platform.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <GlassCard className="text-center p-8">
              <div className="w-16 h-16 bg-gradient-to-r from-campus-green to-info rounded-full flex items-center justify-center mx-auto mb-6">
                <Users size={24} className="text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-4">Community Driven</h3>
              <p className="text-theme-text-secondary">
                Built by students, for students. Our platform connects the campus community and creates opportunities for everyone.
              </p>
            </GlassCard>

            <GlassCard className="text-center p-8">
              <div className="w-16 h-16 bg-gradient-to-r from-info to-campus-green rounded-full flex items-center justify-center mx-auto mb-6">
                <Clock size={24} className="text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-4">Fast & Reliable</h3>
              <p className="text-theme-text-secondary">
                Get your documents printed and delivered quickly with our network of trusted campus partners.
              </p>
            </GlassCard>

            <GlassCard className="text-center p-8">
              <div className="w-16 h-16 bg-gradient-to-r from-campus-green to-info rounded-full flex items-center justify-center mx-auto mb-6">
                <Shield size={24} className="text-white" />
              </div>
              <h3 className="text-xl font-semibold mb-4">Secure & Trusted</h3>
              <p className="text-theme-text-secondary">
                Your documents and payments are protected with enterprise-grade security and verified users.
              </p>
            </GlassCard>
          </div>
        </div>
      </section>

      {/* User Reviews Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4 gradient-text">What Students Say</h2>
            <p className="text-xl text-theme-text-secondary">
              Join thousands of satisfied students who trust CampusPrint for their printing and delivery needs.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {reviewsData.reviews.map((review) => (
              <GlassCard key={review.id} className="p-6">
                <div className="flex items-center mb-4">
                  <img
                    src={review.avatar}
                    alt={review.name}
                    className="w-12 h-12 rounded-full object-cover mr-4"
                  />
                  <div>
                    <h4 className="font-semibold">{review.name}</h4>
                    <div className="flex items-center">
                      {[...Array(review.rating)].map((_, i) => (
                        <Star key={i} size={16} className="text-yellow-400 fill-current" />
                      ))}
                    </div>
                  </div>
                </div>
                <p className="text-theme-text-secondary italic">"{review.comment}"</p>
                <div className="mt-4">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-campus-green-light text-campus-green">
                    {review.serviceType}
                  </span>
                </div>
              </GlassCard>
            ))}
          </div>

          <div className="text-center mt-12">
            <GlassButton
              variant="primary"
              size="lg"
              glow
              onClick={() => isAuthenticated ? navigate('/dashboard') : handleActionClick('/signup')}
            >
              {isAuthenticated ? 'Go to Dashboard' : 'Join CampusPrint Today'}
            </GlassButton>
          </div>
        </div>
      </section>

      {/* Registration moved to dedicated route */}
    </div>
  );
};
FILE: src/pages/LoginPage.tsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { Mail, Lock, Eye, EyeOff, User as UserIcon, Printer, Shield } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import { GlassInput } from '../components/ui/GlassInput';

export const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState<string>('');
  const { login, loginDemo, isLoading, user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  const from = (location.state as any)?.from?.pathname || '/dashboard';

  // If user becomes authenticated (another tab or demo), redirect safely.
  useEffect(() => {
    if (user) {
      navigate(from, { replace: true });
    }
  }, [user, from, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();              // hard-stop native navigation
    setError('');

    const safeEmail = email.trim();
    const safePassword = password;

    if (!safeEmail || !safePassword) {
      setError('Please enter both email and password');
      return;
    }

    try {
      await login(safeEmail, safePassword); // AuthContext throws on 401
      // navigation is handled by useEffect when user state updates
    } catch (err: any) {
      setError(err?.message || 'Invalid email or password');
    }
  };

  const handleGuest = async (role: 'user' | 'printer-owner' | 'admin' = 'user') => {
    setError('');
    try {
      await loginDemo(role);
      // navigation will follow via useEffect when user state changes
    } catch (err: any) {
      setError('Demo sign-in failed. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-app-bg flex items-center justify-center px-4 py-10">
      <div className="w-full max-w-md">
        <div className="text-center">
          <h2 className="text-3xl font-bold gradient-text">Welcome Back</h2>
          <p className="mt-2 text-theme-text-secondary">Sign in to your account or explore in demo mode</p>
        </div>

        <GlassCard className="p-8">
          <form onSubmit={handleSubmit} noValidate className="space-y-6" autoComplete="on">
            {error && (
              <div
                role="alert"
                aria-live="polite"
                className="p-3 rounded-component bg-danger/10 border border-danger/20 text-danger text-sm"
              >
                {error}
              </div>
            )}

            <GlassInput
              label="Email"
              type="email"
              value={email}
              onChange={(e) => { setEmail(e.target.value); if (error) setError(''); }}
              icon={<Mail size={20} />}
              required
              autoComplete="username"
              disabled={isLoading}
            />

            <div className="relative">
              <GlassInput
                label="Password"
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={(e) => { setPassword(e.target.value); if (error) setError(''); }}
                icon={<Lock size={20} />}
                required
                autoComplete="current-password"
                disabled={isLoading}
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-theme-text-muted hover:text-theme-text transition-colors"
                aria-label={showPassword ? 'Hide password' : 'Show password'}
                disabled={isLoading}
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>

            <GlassButton
              type="submit"
              variant="primary"
              className="w-full"
              loading={isLoading}
              glow
              disabled={isLoading}
            >
              Sign In
            </GlassButton>
          </form>

          {/* Divider */}
          <div className="flex items-center my-6">
            <div className="flex-1 h-px bg-glass-border" />
            <span className="px-3 text-xs text-theme-text-muted">or</span>
            <div className="flex-1 h-px bg-glass-border" />
          </div>

          {/* One-click demo — simplified: explicit type=button to avoid accidental submit in any DOM nesting */}
          <div className="space-y-4">
            <div className="text-xs uppercase tracking-wide text-theme-text-muted">
              Explore in demo mode
            </div>

            <div className="grid grid-cols-3 gap-3">
              <GlassButton
                type="button"
                variant="ghost"
                className="w-full border border-zinc-300 dark:border-glass-border hover:bg-glass-bg focus-visible:ring-2 focus-visible:ring-campus-green"
                onClick={() => handleGuest('user')}
                aria-label="Continue as Student (Demo)"
                disabled={isLoading}
              >
                <UserIcon size={16} className="mr-2" />
                Student
              </GlassButton>

              <GlassButton
                type="button"
                variant="ghost"
                className="w-full border border-zinc-300 dark:border-glass-border hover:bg-glass-bg focus-visible:ring-2 focus-visible:ring-campus-green"
                onClick={() => handleGuest('printer-owner')}
                aria-label="Continue as Printer Owner (Demo)"
                disabled={isLoading}
              >
                <Printer size={16} className="mr-2" />
                Owner
              </GlassButton>

              <GlassButton
                type="button"
                variant="ghost"
                className="w-full border border-zinc-300 dark:border-glass-border hover:bg-glass-bg focus-visible:ring-2 focus-visible:ring-campus-green"
                onClick={() => handleGuest('admin')}
                aria-label="Continue as Admin (Demo)"
                disabled={isLoading}
              >
                <Shield size={16} className="mr-2" />
                Admin
              </GlassButton>
            </div>
          </div>

          {/* Links */}
          <div className="mt-6 text-center">
            <p className="text-theme-text-secondary">
              Don&apos;t have an account?{' '}
              <Link to="/signup" className="text-campus-green hover:text-campus-green-hover font-medium">
                Sign up
              </Link>
            </p>
          </div>
        </GlassCard>
      </div>
    </div>
  );
};

FILE: src/pages/OrdersPage.tsx
import React, { useEffect, useMemo, useState } from "react";
import { Loader2 } from "lucide-react";
import { GlassCard } from "../components/ui/GlassCard";
import { useAuth } from "../context/AuthContext";
import { listOrdersByUser } from "../lib/api";
import { PrintJob } from "../types";

function formatDateTime(iso?: string | null) {
  if (!iso) return "";
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return iso || "";
  return d.toLocaleString();
}

export function OrdersPage() {
  const { user } = useAuth();
  const [orders, setOrders] = useState<PrintJob[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let cancelled = false;
    async function load() {
      if (!user?.id) {
        setLoading(false);
        return;
      }
      const res = await listOrdersByUser(user.id);
      if (cancelled) return;
      if (res.ok) {
        setOrders((res.data as unknown as PrintJob[]) ?? []);
      } else {
        setError(res.error?.message || "Failed to load orders");
      }
      setLoading(false);
    }
    load();
    return () => {
      cancelled = true;
    };
  }, [user?.id]);

  const hasOrders = useMemo(() => orders && orders.length > 0, [orders]);

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-semibold mb-6">My Orders</h1>
      <GlassCard>
        {loading ? (
          <div className="p-8 flex items-center gap-3">
            <Loader2 className="animate-spin" />
            <span>Loading orders…</span>
          </div>
        ) : error ? (
          <div className="p-8 text-red-500">{error}</div>
        ) : !hasOrders ? (
          <div className="p-8 text-theme-text-muted">No orders yet.</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full text-left">
              <thead>
                <tr className="text-sm text-theme-text-muted border-b border-glass-border">
                  <th className="py-3 pr-4">File</th>
                  <th className="py-3 pr-4">Printer</th>
                  <th className="py-3 pr-4">Pages</th>
                  <th className="py-3 pr-4">Copies</th>
                  <th className="py-3 pr-4">Cost</th>
                  <th className="py-3 pr-4">Status</th>
                  <th className="py-3 pr-4">Created</th>
                  <th className="py-3">Completed</th>
                </tr>
              </thead>
              <tbody>
                {orders.map((o) => {
                  const pagesCombined =
                    typeof o.pages === "number"
                      ? o.pages
                      : (o.colorPages ?? 0) + (o.bwPages ?? 0);
                  return (
                    <tr
                      key={String(o.id)}
                      className="border-b border-glass-border/60 text-sm"
                    >
                      <td className="py-3 pr-4">{o.fileName || "-"}</td>
                      <td className="py-3 pr-4">{o.printerId || "-"}</td>
                      <td className="py-3 pr-4">
                        {pagesCombined}
                        {typeof o.colorPages === "number" ||
                        typeof o.bwPages === "number"
                          ? ` (C:${o.colorPages ?? 0}/B:${o.bwPages ?? 0})`
                          : ""}
                      </td>
                      <td className="py-3 pr-4">{o.copies ?? 1}</td>
                      <td className="py-3 pr-4">
                        {typeof (o as any).totalCost === "number"
                          ? (o as any).totalCost.toFixed(2)
                          : typeof (o as any).cost === "number"
                          ? (o as any).cost.toFixed(2)
                          : "-"}
                      </td>
                      <td className="py-3 pr-4">
                        {String(o.status || "PENDING")}
                      </td>
                      <td className="py-3 pr-4">
                        {formatDateTime(o.createdAt)}
                      </td>
                      <td className="py-3">{formatDateTime((o as any).completedAt)}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </GlassCard>
    </div>
  );
}

FILE: src/pages/PrinterRegisterPage.tsx
// frontend/src/pages/PrinterRegisterPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { createPrinter } from '../lib/api';
import { useToast } from '../context/ToastContext';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassInput } from '../components/ui/GlassInput';
import { GlassButton } from '../components/ui/GlassButton';

export const PrinterRegisterPage: React.FC = () => {
  const { user } = useAuth();
  const { addToast } = useToast();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: '',
    type: 'both',
    pricePerPageBW: '',
    pricePerPageColor: '',
    brand: '',
    model: '',
    paperSizes: 'A4,Letter',
    features: '',
    hall: '',
    room: '',
    university: '',
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user?.id) {
      addToast({ type: 'error', title: 'Not logged in', message: 'Please log in first.' });
      return;
    }

    const paperSizesArr = formData.paperSizes
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);

    const featuresArr = formData.features
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);

    const payload = {
      name: formData.name,
      ownerId: String(user.id),
      ownerName: user.username || user.email || '',
      type: formData.type,
      pricePerPageBW: Number(formData.pricePerPageBW || 0),
      pricePerPageColor: Number(formData.pricePerPageColor || 0),
      location: {
        university: formData.university || '',
        hall: formData.hall || '',
        room: formData.room || ''
      },
      specifications: {
        brand: formData.brand || '',
        model: formData.model || '',
        paperSizes: paperSizesArr,
        features: featuresArr
      }
    };

    const res = await createPrinter(payload);
    if (!res.ok) {
      addToast({
        type: 'error',
        title: 'Application failed',
        message: res.error?.message || 'Try again.'
      });
      return;
    }

    addToast({ type: 'success', title: 'Submitted', message: 'Waiting for admin approval.' });
    navigate('/dashboard');
  };

  return (
    <div className="min-h-screen pt-20 px-4 sm:px-6 lg:px-8 flex justify-center">
      <div className="w-full max-w-2xl">
        <h1 className="text-3xl font-bold gradient-text mb-6 text-center">Register Your Printer</h1>

        <GlassCard className="p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            <GlassInput
              label="Printer Name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-theme-text mb-2">Printer Type</label>
                <select
                  name="type"
                  value={formData.type}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
                >
                  <option value="color">Color Only</option>
                  <option value="bw">Black & White Only</option>
                  <option value="both">Both Color & B&W</option>
                </select>
              </div>
              <GlassInput
                label="B&W Price per Page (৳)"
                name="pricePerPageBW"
                type="number"
                step="0.01"
                value={formData.pricePerPageBW}
                onChange={handleChange}
                required
              />
            </div>

            {formData.type !== 'bw' && (
              <GlassInput
                label="Color Price per Page (৳)"
                name="pricePerPageColor"
                type="number"
                step="0.01"
                value={formData.pricePerPageColor}
                onChange={handleChange}
                required={formData.type !== 'bw'}
              />
            )}

            <div className="grid grid-cols-2 gap-4">
              <GlassInput
                label="Brand"
                name="brand"
                value={formData.brand}
                onChange={handleChange}
                required
              />
              <GlassInput
                label="Model"
                name="model"
                value={formData.model}
                onChange={handleChange}
                required
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <GlassInput
                label="University"
                name="university"
                value={formData.university}
                onChange={handleChange}
              />
              <GlassInput
                label="Hall"
                name="hall"
                value={formData.hall}
                onChange={handleChange}
                required
              />
            </div>

            <GlassInput
              label="Room (Optional)"
              name="room"
              value={formData.room}
              onChange={handleChange}
            />

            <GlassInput
              label="Paper Sizes (comma separated)"
              name="paperSizes"
              value={formData.paperSizes}
              onChange={handleChange}
            />

            <GlassInput
              label="Features (comma separated)"
              name="features"
              value={formData.features}
              onChange={handleChange}
            />

            <GlassButton variant="primary" type="submit" className="w-full" glow>
              Submit Application
            </GlassButton>
          </form>
        </GlassCard>
      </div>
    </div>
  );
};

FILE: src/pages/PrintersPage.tsx
import React, { useEffect, useMemo, useState } from 'react';
import { Printer as PrinterIcon, MapPin, Search, Upload } from 'lucide-react';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import { GlassInput } from '../components/ui/GlassInput';
import { Modal } from '../components/ui/Modal';
import { FileUpload } from '../components/ui/FileUpload';
import { listPrinters } from '../lib/api';
import type { Printer as PrinterType } from '../types';

export const PrintersPage: React.FC = () => {
  const [printers, setPrinters] = useState<PrinterType[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<'all' | 'bw' | 'color' | 'both'>('all');

  const [showUploadModal, setShowUploadModal] = useState(false);
  const [selectedPrinter, setSelectedPrinter] = useState<PrinterType | null>(null);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [colorPrint, setColorPrint] = useState(false);

  useEffect(() => {
    let canceled = false;
    async function load() {
      setIsLoading(true);
      setError(null);
      const res = await listPrinters();
      if (canceled) return;
      if (!res.ok || !Array.isArray(res.data)) {
        setPrinters([]);
        setError(res.error?.message || 'Failed to load printers');
      } else {
        // Backend already aligned to frontend types (id, name, type, pricePerPageBW, pricePerPageColor, location, specifications, status, isApproved, rating, totalJobs, createdAt)
        setPrinters(res.data as PrinterType[]);
      }
      setIsLoading(false);
    }

    load();
    return () => {
      canceled = true;
    };
  }, []);

  const filtered = useMemo(() => {
    return printers.filter((printer) => {
      const q = searchQuery.trim().toLowerCase();
      const matchesSearch =
        q === '' ||
        printer.name.toLowerCase().includes(q) ||
        printer.location.hall.toLowerCase().includes(q) ||
        (printer.location.room || '').toLowerCase().includes(q) ||
        printer.specifications.brand.toLowerCase().includes(q) ||
        printer.specifications.model.toLowerCase().includes(q);

      const matchesType = filterType === 'all' || printer.type === filterType;
      return matchesSearch && matchesType;
    });
  }, [printers, searchQuery, filterType]);

  const openUpload = (p: PrinterType) => {
    setSelectedPrinter(p);
    setUploadedFiles([]);
    setColorPrint(false);
    setShowUploadModal(true);
  };

  // Stub — integrate order submission later to /api/orders (we’ll wire this in the Orders step)
  const handleSubmitPrintJob = () => {
    // You can collect uploadedFiles and selectedPrinter to POST /api/orders here.
    setShowUploadModal(false);
    alert('Print job submitted (demo stub). We will wire this to /api/orders in the next step.');
  };

  return (
    <div className="min-h-screen pt-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto space-y-6">
        <h1 className="text-3xl font-bold gradient-text">Find a Printer</h1>

        {/* Search & Filters */}
        <GlassCard className="p-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <GlassInput
                label="Search"
                placeholder="Search by name, hall, brand or model"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                icon={<Search size={18} />}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-theme-text mb-2">Type</label>
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value as any)}
                className="w-full px-4 py-3 bg-glass-bg backdrop-blur-glass border border-glass-border rounded-component text-theme-text focus:outline-none focus:border-campus-green"
              >
                <option value="all">All</option>
                <option value="bw">Black & White</option>
                <option value="color">Color</option>
                <option value="both">Both</option>
              </select>
            </div>
          </div>
        </GlassCard>

        {/* State */}
        {isLoading && (
          <GlassCard className="p-6 text-theme-text-secondary">Loading printers…</GlassCard>
        )}
        {!!error && (
          <GlassCard className="p-6 text-red-500">Failed to load printers: {error}</GlassCard>
        )}
        {!isLoading && !error && filtered.length === 0 && (
          <GlassCard className="p-6 text-theme-text-secondary">No printers found.</GlassCard>
        )}

        {/* Printers list */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {filtered.map((p) => (
            <GlassCard key={p.id} className="p-5">
              <div className="flex items-start gap-3">
                <div className="p-2 rounded-component bg-glass-bg border border-glass-border">
                  <PrinterIcon size={20} />
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold text-theme-text">{p.name}</h3>
                    <span className="text-xs px-2 py-1 rounded-component border border-glass-border text-theme-text-secondary">
                      {p.type === 'bw' ? 'B&W' : p.type === 'color' ? 'Color' : 'Both'}
                    </span>
                  </div>
                  <div className="mt-1 text-sm text-theme-text-secondary flex items-center gap-1">
                    <MapPin size={14} />
                    <span>
                      {p.location.hall}
                      {p.location.room ? ` • ${p.location.room}` : ''}
                    </span>
                  </div>
                  <div className="mt-2 text-sm text-theme-text">
                    <div>৳{p.pricePerPageBW.toFixed(2)}/page B&W</div>
                    {p.pricePerPageColor > 0 && (
                      <div>৳{p.pricePerPageColor.toFixed(2)}/page Color</div>
                    )}
                  </div>
                  <div className="mt-3">
                    <GlassButton
                      variant="primary"
                      onClick={() => openUpload(p)}
                      className="w-full"
                      glow
                    >
                      <Upload size={16} className="mr-2" />
                      Print to this printer
                    </GlassButton>
                  </div>
                </div>
              </div>
            </GlassCard>
          ))}
        </div>

        {/* Upload Modal */}
        <Modal
          isOpen={showUploadModal}
          onClose={() => setShowUploadModal(false)}
          title={`Print to ${selectedPrinter?.name || ''}`}
          size="lg"
        >
          <div className="space-y-6">
            {selectedPrinter && (
              <div className="p-4 bg-glass-bg rounded-component">
                <h4 className="font-medium text-theme-text mb-2">Printer Details</h4>
                <div className="space-y-1 text-sm text-theme-text-secondary">
                  <p>
                    <strong>Location:</strong> {selectedPrinter.location.hall}{' '}
                    {selectedPrinter.location.room || ''}
                  </p>
                  <p>
                    <strong>B&W Price:</strong> ৳{selectedPrinter.pricePerPageBW}/page
                  </p>
                  {selectedPrinter.pricePerPageColor > 0 && (
                    <p>
                      <strong>Color Price:</strong> ৳{selectedPrinter.pricePerPageColor}/page
                    </p>
                  )}
                  <p>
                    <strong>Features:</strong>{' '}
                    {selectedPrinter.specifications.features.join(', ')}
                  </p>
                </div>
              </div>
            )}

            {/* Accepts png/jpg/jpeg already (and more) */}
            <FileUpload
              onFilesChange={setUploadedFiles}
              acceptedTypes=".pdf,doc,docx,jpg,jpeg,png"
              multiple
            />

            {selectedPrinter && selectedPrinter.type !== 'bw' && selectedPrinter.pricePerPageColor > 0 && (
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="color-print"
                  checked={colorPrint}
                  onChange={(e) => setColorPrint(e.target.checked)}
                  className="w-4 h-4 text-campus-green bg-glass-bg border-glass-border rounded focus:ring-campus-green"
                />
                <label htmlFor="color-print" className="text-sm font-medium text-theme-text">
                  Color Print (+৳
                  {(
                    (selectedPrinter.pricePerPageColor || 0) -
                    (selectedPrinter.pricePerPageBW || 0)
                  ).toFixed(2)}
                  /page)
                </label>
              </div>
            )}

            {uploadedFiles.length > 0 && selectedPrinter && (
              <div className="p-4 bg-glass-bg rounded-component">
                <h4 className="font-medium text-theme-text mb-2">Print Summary</h4>
                <div className="space-y-1 text-sm text-theme-text-secondary">
                  <p>
                    <strong>Files:</strong> {uploadedFiles.length}
                  </p>
                  <p>
                    <strong>Print Type:</strong> {colorPrint ? 'Color' : 'Black & White'}
                  </p>
                  <p>
                    <strong>Estimated Cost:</strong> ৳
                    {(
                      uploadedFiles.length *
                      (colorPrint
                        ? selectedPrinter.pricePerPageColor || 0
                        : selectedPrinter.pricePerPageBW || 0)
                    ).toFixed(2)}
                  </p>
                </div>
              </div>
            )}

            <div className="flex gap-3">
              <GlassButton
                variant="secondary"
                onClick={() => setShowUploadModal(false)}
                className="flex-1"
              >
                Cancel
              </GlassButton>
              <GlassButton
                variant="primary"
                onClick={handleSubmitPrintJob}
                className="flex-1"
                disabled={uploadedFiles.length === 0}
              >
                Submit Print Job
              </GlassButton>
            </div>
          </div>
        </Modal>
      </div>
    </div>
  );
};

FILE: src/pages/SignupPage.tsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Mail, Lock, User, MapPin, Eye, EyeOff, Building } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { GlassCard } from '../components/ui/GlassCard';
import { GlassButton } from '../components/ui/GlassButton';
import { GlassInput } from '../components/ui/GlassInput';

export const SignupPage: React.FC = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    username: '',
    firstName: '',
    lastName: '',
    university: '',
    hall: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [error, setError] = useState('');
  const { signup, isLoading } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (formData.password.length < 6) {
      setError('Password must be at least 6 characters');
      return;
    }

    try {
      await signup(formData);
      navigate('/dashboard');
    } catch (err) {
      setError('Failed to create account. Please try again.');
    }
  };

  return (
    <div className="min-h-screen pt-16 flex items-center justify-center px-4 sm:px-6 lg:px-8 py-12">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <h2 className="text-3xl font-bold gradient-text">Join CampusPrint</h2>
          <p className="mt-2 text-theme-text-secondary">Create your account to get started</p>
        </div>

        <GlassCard className="p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {error && (
              <div className="p-3 rounded-component bg-danger/10 border border-danger/20 text-danger text-sm">
                {error}
              </div>
            )}

            <div className="grid grid-cols-2 gap-4">
              <GlassInput
                label="First Name"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                icon={<User size={20} />}
                required
              />
              <GlassInput
                label="Last Name"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                icon={<User size={20} />}
                required
              />
            </div>

            <GlassInput
              label="Username"
              name="username"
              value={formData.username}
              onChange={handleChange}
              icon={<User size={20} />}
              required
            />

            <GlassInput
              label="Email"
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              icon={<Mail size={20} />}
              required
            />

            <GlassInput
              label="University"
              name="university"
              value={formData.university}
              onChange={handleChange}
              icon={<Building size={20} />}
              required
            />

            <GlassInput
              label="Hall/Residence (Optional)"
              name="hall"
              value={formData.hall}
              onChange={handleChange}
              icon={<MapPin size={20} />}
            />

            <div className="relative">
              <GlassInput
                label="Password"
                type={showPassword ? 'text' : 'password'}
                name="password"
                value={formData.password}
                onChange={handleChange}
                icon={<Lock size={20} />}
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-theme-text-muted hover:text-theme-text transition-colors"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>

            <div className="relative">
              <GlassInput
                label="Confirm Password"
                type={showConfirmPassword ? 'text' : 'password'}
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleChange}
                icon={<Lock size={20} />}
                required
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-theme-text-muted hover:text-theme-text transition-colors"
              >
                {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>

            <GlassButton
              type="submit"
              variant="primary"
              className="w-full"
              loading={isLoading}
              glow
            >
              Create Account
            </GlassButton>
          </form>

          <div className="mt-6 text-center">
            <p className="text-theme-text-secondary">
              Already have an account?{' '}
              <Link to="/login" className="text-campus-green hover:text-campus-green-hover font-medium">
                Sign in
              </Link>
            </p>
          </div>
        </GlassCard>
      </div>
    </div>
  );
};
FILE: src/types/index.ts
export interface User {
  id: string;
  email: string;
  username: string;
  firstName: string;
  lastName: string;
  profilePicture?: string;
  credits: number;
  roles: UserRole[];
  university: string;
  hall?: string;
  createdAt: string;
}

export type UserRole = 'user' | 'printer_owner' | 'admin';

export interface Printer {
  id: string;
  name: string;
  ownerId: string;
  ownerName: string;
  type: 'color' | 'bw' | 'both';
  pricePerPageBW: number;
  pricePerPageColor: number;
  location: {
    university: string;
    hall: string;
    room?: string;
  };
  specifications: {
    brand: string;
    model: string;
    paperSizes: string[];
    features: string[];
  };
  status: 'online' | 'offline' | 'busy' | 'maintenance' | 'pending' | 'declined';
  isApproved: boolean;
  rating: number;
  totalJobs: number;
  createdAt: string;
}

export interface PrintJob {
  id: string;
  userId: string;
  printerId: string;
  fileName: string;
  fileSize: number;
  pages: number;
  copies: number;
  colorPages: number;
  bwPages: number;
  totalCost: number;
  status: 'pending' | 'accepted' | 'printing' | 'completed' | 'cancelled';
  createdAt: string;
  completedAt?: string;
}

export interface DeliveryRequest {
  id: string;
  userId: string;
  userName: string;
  userProfilePicture?: string;
  items: {
    name: string;
    image?: string;
    quantity: number;
    description?: string;
  }[];
  pickupLocation: {
    university: string;
    hall: string;
    room?: string;
  };
  deliveryLocation: {
    university: string;
    hall: string;
    room?: string;
  };
  payment: number;
  status: 'pending' | 'accepted' | 'in-progress' | 'completed' | 'cancelled';
  acceptedBy?: string;
  createdAt: string;
  requestedDeliveryTime?: string;
  urgency: 'low' | 'medium' | 'high';
}

export interface Review {
  id: string;
  userId: string;
  userName: string;
  userProfilePicture?: string;
  rating: number;
  comment: string;
  serviceType: 'printing' | 'delivery';
  createdAt: string;
}
FILE: src/utils/cn.ts
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
